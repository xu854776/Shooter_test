
Shooter_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d38  08002d38  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d40  08002d40  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08002d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          0000060c  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000758  20000758  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006c0b  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001704  00000000  00000000  00026d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f0  00000000  00000000  00028490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000528  00000000  00000000  00028a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020256  00000000  00000000  00028fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007797  00000000  00000000  000491fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2038  00000000  00000000  00050995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001129cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001610  00000000  00000000  00112a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000014c 	.word	0x2000014c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d10 	.word	0x08002d10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000150 	.word	0x20000150
 80001c4:	08002d10 	.word	0x08002d10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Can_MessageConfig>:
/* USER CODE END 0 */
/* CAN1 init function */

/* USER CODE BEGIN 1 */
void Can_MessageConfig(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
	for(int i=0; i<8; i++)           //无特殊情况批量设�?????
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	e052      	b.n	800057e <Can_MessageConfig+0xb2>
	{
		Can_cmdHeader[i].ExtId =   0x0;
 80004d8:	493a      	ldr	r1, [pc, #232]	; (80005c4 <Can_MessageConfig+0xf8>)
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	4613      	mov	r3, r2
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	4413      	add	r3, r2
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	440b      	add	r3, r1
 80004e6:	3304      	adds	r3, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
		Can_cmdHeader[i].IDE = CAN_ID_STD;
 80004ec:	4935      	ldr	r1, [pc, #212]	; (80005c4 <Can_MessageConfig+0xf8>)
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	4613      	mov	r3, r2
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	4413      	add	r3, r2
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	440b      	add	r3, r1
 80004fa:	3308      	adds	r3, #8
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
		Can_cmdHeader[i].RTR = CAN_RTR_DATA;
 8000500:	4930      	ldr	r1, [pc, #192]	; (80005c4 <Can_MessageConfig+0xf8>)
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	4613      	mov	r3, r2
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	4413      	add	r3, r2
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	440b      	add	r3, r1
 800050e:	330c      	adds	r3, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
		Can_cmdHeader[i].DLC = 8;
 8000514:	492b      	ldr	r1, [pc, #172]	; (80005c4 <Can_MessageConfig+0xf8>)
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	4613      	mov	r3, r2
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	4413      	add	r3, r2
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	440b      	add	r3, r1
 8000522:	3310      	adds	r3, #16
 8000524:	2208      	movs	r2, #8
 8000526:	601a      	str	r2, [r3, #0]
		Can_recHeader[i].ExtId = 0x0;
 8000528:	4927      	ldr	r1, [pc, #156]	; (80005c8 <Can_MessageConfig+0xfc>)
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	4613      	mov	r3, r2
 800052e:	00db      	lsls	r3, r3, #3
 8000530:	1a9b      	subs	r3, r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	440b      	add	r3, r1
 8000536:	3304      	adds	r3, #4
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
		Can_recHeader[i].IDE = CAN_ID_STD;
 800053c:	4922      	ldr	r1, [pc, #136]	; (80005c8 <Can_MessageConfig+0xfc>)
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	4613      	mov	r3, r2
 8000542:	00db      	lsls	r3, r3, #3
 8000544:	1a9b      	subs	r3, r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	440b      	add	r3, r1
 800054a:	3308      	adds	r3, #8
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
		Can_recHeader[i].RTR = CAN_RTR_DATA;
 8000550:	491d      	ldr	r1, [pc, #116]	; (80005c8 <Can_MessageConfig+0xfc>)
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	4613      	mov	r3, r2
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	1a9b      	subs	r3, r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	440b      	add	r3, r1
 800055e:	330c      	adds	r3, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
		Can_recHeader[i].DLC = 8;
 8000564:	4918      	ldr	r1, [pc, #96]	; (80005c8 <Can_MessageConfig+0xfc>)
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	4613      	mov	r3, r2
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	1a9b      	subs	r3, r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	440b      	add	r3, r1
 8000572:	3310      	adds	r3, #16
 8000574:	2208      	movs	r2, #8
 8000576:	601a      	str	r2, [r3, #0]
	for(int i=0; i<8; i++)           //无特殊情况批量设�?????
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b07      	cmp	r3, #7
 8000582:	dda9      	ble.n	80004d8 <Can_MessageConfig+0xc>
	}
	Can_cmdHeader[Motor_RightFriction_ID].StdId = 0x200;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <Can_MessageConfig+0xf8>)
 8000586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800058a:	619a      	str	r2, [r3, #24]
	Can_recHeader[Motor_RightFriction_ID].StdId = 0x201;
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <Can_MessageConfig+0xfc>)
 800058e:	f240 2201 	movw	r2, #513	; 0x201
 8000592:	61da      	str	r2, [r3, #28]

	Can_cmdHeader[Motor_LeftFriction_ID].StdId = 0x200;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <Can_MessageConfig+0xf8>)
 8000596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800059a:	631a      	str	r2, [r3, #48]	; 0x30
	Can_recHeader[Motor_LeftFriction_ID].StdId = 0x202;
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <Can_MessageConfig+0xfc>)
 800059e:	f240 2202 	movw	r2, #514	; 0x202
 80005a2:	639a      	str	r2, [r3, #56]	; 0x38
//    Can_recHeader[Motor_Pitch_ID].StdId = 0x205;           //pitch id=1
//
//	Can_cmdHeader[Motor_Yaw_ID].StdId = 0x1FF;
//    Can_recHeader[Motor_Yaw_ID].StdId = 0x206;             //yaw id=2
//
	Can_cmdHeader[Motor_AmmoFeed_ID].StdId = 0x1FF;
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <Can_MessageConfig+0xf8>)
 80005a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80005aa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    Can_recHeader[Motor_AmmoFeed_ID].StdId = 0x207;               //c610 id =7
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <Can_MessageConfig+0xfc>)
 80005b0:	f240 2207 	movw	r2, #519	; 0x207
 80005b4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4



}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	20000178 	.word	0x20000178
 80005c8:	20000238 	.word	0x20000238

080005cc <MX_CAN1_Init>:
void MX_CAN1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_CAN1_Init+0x64>)
 80005d2:	4a18      	ldr	r2, [pc, #96]	; (8000634 <MX_CAN1_Init+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_CAN1_Init+0x64>)
 80005d8:	2206      	movs	r2, #6
 80005da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_CAN1_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_CAN1_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_CAN1_Init+0x64>)
 80005ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_CAN1_Init+0x64>)
 80005f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <MX_CAN1_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_CAN1_Init+0x64>)
 8000600:	2201      	movs	r2, #1
 8000602:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_CAN1_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_CAN1_Init+0x64>)
 800060c:	2200      	movs	r2, #0
 800060e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_CAN1_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_CAN1_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_CAN1_Init+0x64>)
 800061e:	f000 fe17 	bl	8001250 <HAL_CAN_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000628:	f000 fb42 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000344 	.word	0x20000344
 8000634:	40006400 	.word	0x40006400

08000638 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a29      	ldr	r2, [pc, #164]	; (80006fc <HAL_CAN_MspInit+0xc4>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d14b      	bne.n	80006f2 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <HAL_CAN_MspInit+0xc8>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	4a27      	ldr	r2, [pc, #156]	; (8000700 <HAL_CAN_MspInit+0xc8>)
 8000664:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000668:	6413      	str	r3, [r2, #64]	; 0x40
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <HAL_CAN_MspInit+0xc8>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <HAL_CAN_MspInit+0xc8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a20      	ldr	r2, [pc, #128]	; (8000700 <HAL_CAN_MspInit+0xc8>)
 8000680:	f043 0308 	orr.w	r3, r3, #8
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <HAL_CAN_MspInit+0xc8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0308 	and.w	r3, r3, #8
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000692:	2303      	movs	r3, #3
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006a2:	2309      	movs	r3, #9
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4815      	ldr	r0, [pc, #84]	; (8000704 <HAL_CAN_MspInit+0xcc>)
 80006ae:	f001 fd43 	bl	8002138 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2105      	movs	r1, #5
 80006b6:	2013      	movs	r0, #19
 80006b8:	f001 fd07 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80006bc:	2013      	movs	r0, #19
 80006be:	f001 fd20 	bl	8002102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2105      	movs	r1, #5
 80006c6:	2014      	movs	r0, #20
 80006c8:	f001 fcff 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006cc:	2014      	movs	r0, #20
 80006ce:	f001 fd18 	bl	8002102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2105      	movs	r1, #5
 80006d6:	2015      	movs	r0, #21
 80006d8:	f001 fcf7 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006dc:	2015      	movs	r0, #21
 80006de:	f001 fd10 	bl	8002102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2105      	movs	r1, #5
 80006e6:	2016      	movs	r0, #22
 80006e8:	f001 fcef 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80006ec:	2016      	movs	r0, #22
 80006ee:	f001 fd08 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	; 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40006400 	.word	0x40006400
 8000700:	40023800 	.word	0x40023800
 8000704:	40020c00 	.word	0x40020c00

08000708 <Can_Filter1Config>:
  }
}


void Can_Filter1Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef Filter_1;
	Filter_1.FilterActivation = ENABLE;
 800070e:	2301      	movs	r3, #1
 8000710:	623b      	str	r3, [r7, #32]
	Filter_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
	Filter_1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
	Filter_1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
	Filter_1.FilterIdHigh = 0x0000;
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
	Filter_1.FilterIdLow = 0x0000;
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
	Filter_1.FilterMaskIdHigh = 0x0000;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
	Filter_1.FilterMaskIdLow = 0x0000;                      //全部接收
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
	Filter_1.FilterBank = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
	HAL_CAN_ConfigFilter(&hcan1, &Filter_1);
 8000732:	463b      	mov	r3, r7
 8000734:	4619      	mov	r1, r3
 8000736:	4803      	ldr	r0, [pc, #12]	; (8000744 <Can_Filter1Config+0x3c>)
 8000738:	f000 fe86 	bl	8001448 <HAL_CAN_ConfigFilter>
}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000344 	.word	0x20000344

08000748 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a74      	ldr	r2, [pc, #464]	; (8000928 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000756:	4293      	cmp	r3, r2
 8000758:	f040 80e0 	bne.w	800091c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
	{
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &sCan_RxHeader, Can_RxData);
 800075c:	4b73      	ldr	r3, [pc, #460]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800075e:	4a74      	ldr	r2, [pc, #464]	; (8000930 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000760:	2100      	movs	r1, #0
 8000762:	4874      	ldr	r0, [pc, #464]	; (8000934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000764:	f001 f86f 	bl	8001846 <HAL_CAN_GetRxMessage>
		switch(sCan_RxHeader.StdId)
 8000768:	4b71      	ldr	r3, [pc, #452]	; (8000930 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8000770:	2b06      	cmp	r3, #6
 8000772:	f200 80d4 	bhi.w	800091e <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 8000776:	a201      	add	r2, pc, #4	; (adr r2, 800077c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077c:	08000799 	.word	0x08000799
 8000780:	080007ef 	.word	0x080007ef
 8000784:	08000847 	.word	0x08000847
 8000788:	080008a1 	.word	0x080008a1
 800078c:	0800091f 	.word	0x0800091f
 8000790:	0800091f 	.word	0x0800091f
 8000794:	080008ff 	.word	0x080008ff
		{
		case 0x201:
			Motor[1].speed = (uint16_t)(Can_RxData[2]<<8) + Can_RxData[3];
 8000798:	4b64      	ldr	r3, [pc, #400]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800079a:	789b      	ldrb	r3, [r3, #2]
 800079c:	b29b      	uxth	r3, r3
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b62      	ldr	r3, [pc, #392]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80007a4:	78db      	ldrb	r3, [r3, #3]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	4413      	add	r3, r2
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	4b62      	ldr	r3, [pc, #392]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80007b0:	82da      	strh	r2, [r3, #22]
			Motor[1].angle = ((Can_RxData[0]<<8) + Can_RxData[1]);
 80007b2:	4b5e      	ldr	r3, [pc, #376]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	4b5b      	ldr	r3, [pc, #364]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80007be:	785b      	ldrb	r3, [r3, #1]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	4413      	add	r3, r2
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80007c8:	829a      	strh	r2, [r3, #20]
			Motor[1].current = (uint16_t)(Can_RxData[4]<<8) + Can_RxData[5];
 80007ca:	4b58      	ldr	r3, [pc, #352]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b55      	ldr	r3, [pc, #340]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80007d6:	795b      	ldrb	r3, [r3, #5]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	4413      	add	r3, r2
 80007dc:	b29b      	uxth	r3, r3
 80007de:	b21a      	sxth	r2, r3
 80007e0:	4b55      	ldr	r3, [pc, #340]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80007e2:	831a      	strh	r2, [r3, #24]
			Motor[1].temp = Can_RxData[6];
 80007e4:	4b51      	ldr	r3, [pc, #324]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80007e6:	799a      	ldrb	r2, [r3, #6]
 80007e8:	4b53      	ldr	r3, [pc, #332]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80007ea:	769a      	strb	r2, [r3, #26]
		break;
 80007ec:	e097      	b.n	800091e <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
		case 0x202:
			Motor[2].speed = (uint16_t)(Can_RxData[2]<<8) + Can_RxData[3];
 80007ee:	4b4f      	ldr	r3, [pc, #316]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80007f0:	789b      	ldrb	r3, [r3, #2]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4b4c      	ldr	r3, [pc, #304]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80007fa:	78db      	ldrb	r3, [r3, #3]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	4413      	add	r3, r2
 8000800:	b29b      	uxth	r3, r3
 8000802:	b21a      	sxth	r2, r3
 8000804:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000806:	855a      	strh	r2, [r3, #42]	; 0x2a
			Motor[2].angle = ((Can_RxData[0]<<8) + Can_RxData[1]);
 8000808:	4b48      	ldr	r3, [pc, #288]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b29b      	uxth	r3, r3
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b29a      	uxth	r2, r3
 8000812:	4b46      	ldr	r3, [pc, #280]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	b29b      	uxth	r3, r3
 8000818:	4413      	add	r3, r2
 800081a:	b29a      	uxth	r2, r3
 800081c:	4b46      	ldr	r3, [pc, #280]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800081e:	851a      	strh	r2, [r3, #40]	; 0x28
			Motor[2].current = (uint16_t)(Can_RxData[4]<<8) + Can_RxData[5];
 8000820:	4b42      	ldr	r3, [pc, #264]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	b29b      	uxth	r3, r3
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b40      	ldr	r3, [pc, #256]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800082c:	795b      	ldrb	r3, [r3, #5]
 800082e:	b29b      	uxth	r3, r3
 8000830:	4413      	add	r3, r2
 8000832:	b29b      	uxth	r3, r3
 8000834:	b21a      	sxth	r2, r3
 8000836:	4b40      	ldr	r3, [pc, #256]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000838:	859a      	strh	r2, [r3, #44]	; 0x2c
			Motor[2].temp = Can_RxData[6];
 800083a:	4b3c      	ldr	r3, [pc, #240]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800083c:	799a      	ldrb	r2, [r3, #6]
 800083e:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000840:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		break;
 8000844:	e06b      	b.n	800091e <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
		case 0x203:
			Motor[3].speed = (uint16_t)(Can_RxData[2]<<8) + Can_RxData[3];
 8000846:	4b39      	ldr	r3, [pc, #228]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	b29b      	uxth	r3, r3
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b36      	ldr	r3, [pc, #216]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000852:	78db      	ldrb	r3, [r3, #3]
 8000854:	b29b      	uxth	r3, r3
 8000856:	4413      	add	r3, r2
 8000858:	b29b      	uxth	r3, r3
 800085a:	b21a      	sxth	r2, r3
 800085c:	4b36      	ldr	r3, [pc, #216]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800085e:	87da      	strh	r2, [r3, #62]	; 0x3e
			Motor[3].angle = ((Can_RxData[0]<<8) + Can_RxData[1]);
 8000860:	4b32      	ldr	r3, [pc, #200]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b29b      	uxth	r3, r3
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	b29b      	uxth	r3, r3
 8000870:	4413      	add	r3, r2
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b30      	ldr	r3, [pc, #192]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000876:	879a      	strh	r2, [r3, #60]	; 0x3c
			Motor[3].current = (uint16_t)(Can_RxData[4]<<8) + Can_RxData[5];
 8000878:	4b2c      	ldr	r3, [pc, #176]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800087a:	791b      	ldrb	r3, [r3, #4]
 800087c:	b29b      	uxth	r3, r3
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	b29a      	uxth	r2, r3
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000884:	795b      	ldrb	r3, [r3, #5]
 8000886:	b29b      	uxth	r3, r3
 8000888:	4413      	add	r3, r2
 800088a:	b29b      	uxth	r3, r3
 800088c:	b21a      	sxth	r2, r3
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000890:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			Motor[3].temp = Can_RxData[6];
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000896:	799a      	ldrb	r2, [r3, #6]
 8000898:	4b27      	ldr	r3, [pc, #156]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800089a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		break;
 800089e:	e03e      	b.n	800091e <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
		case 0x204:
			Motor[4].speed = (uint16_t)(Can_RxData[2]<<8) + Can_RxData[3];
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008a2:	789b      	ldrb	r3, [r3, #2]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008ac:	78db      	ldrb	r3, [r3, #3]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	4413      	add	r3, r2
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80008b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			Motor[4].angle = ((Can_RxData[0]<<8) + Can_RxData[1]);
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008c8:	785b      	ldrb	r3, [r3, #1]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	4413      	add	r3, r2
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80008d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			Motor[4].current = (uint16_t)(Can_RxData[4]<<8) + Can_RxData[5];
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008e2:	795b      	ldrb	r3, [r3, #5]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4413      	add	r3, r2
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	b21a      	sxth	r2, r3
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80008ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			Motor[4].temp = Can_RxData[6];
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008f4:	799a      	ldrb	r2, [r3, #6]
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80008f8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		break;
 80008fc:	e00f      	b.n	800091e <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
//			feedDog(&motor_WatchDog[6]);
//
//		break;

		case 0x207:
		     Motor[Motor_AmmoFeed_ID].speed = (uint16_t)(Can_RxData[2]<<8) + Can_RxData[3];
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000900:	789b      	ldrb	r3, [r3, #2]
 8000902:	b29b      	uxth	r3, r3
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800090a:	78db      	ldrb	r3, [r3, #3]
 800090c:	b29b      	uxth	r3, r3
 800090e:	4413      	add	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000916:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		break;
 800091a:	e000      	b.n	800091e <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
		}


	}
 800091c:	bf00      	nop
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40006400 	.word	0x40006400
 800092c:	20000168 	.word	0x20000168
 8000930:	20000318 	.word	0x20000318
 8000934:	20000344 	.word	0x20000344
 8000938:	200006b4 	.word	0x200006b4

0800093c <sendMessage>:
#include "can.h"
int16_t Chassis_ctrl[8] = {0};
float speed_x = 0,speed_y = 0,omega = 0,speed_x_commend = 0,speed_y_commend = 0,angle_rad = 0;

void sendMessage(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN sendMessage */
  /* Infinite loop */
	  ChassisCtrl();
 8000940:	f000 f848 	bl	80009d4 <ChassisCtrl>
	  Can_TxData[0] = Chassis_ctrl[0]>>8;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <sendMessage+0x88>)
 8000946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800094a:	121b      	asrs	r3, r3, #8
 800094c:	b21b      	sxth	r3, r3
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <sendMessage+0x8c>)
 8000952:	701a      	strb	r2, [r3, #0]
	  Can_TxData[1] = Chassis_ctrl[0];
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <sendMessage+0x88>)
 8000956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <sendMessage+0x8c>)
 800095e:	705a      	strb	r2, [r3, #1]
	  Can_TxData[2] = Chassis_ctrl[1]>>8;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <sendMessage+0x88>)
 8000962:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000966:	121b      	asrs	r3, r3, #8
 8000968:	b21b      	sxth	r3, r3
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <sendMessage+0x8c>)
 800096e:	709a      	strb	r2, [r3, #2]
	  Can_TxData[3] = Chassis_ctrl[1];
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <sendMessage+0x88>)
 8000972:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <sendMessage+0x8c>)
 800097a:	70da      	strb	r2, [r3, #3]
	  Can_TxData[4] = Chassis_ctrl[2]>>8;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <sendMessage+0x88>)
 800097e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000982:	121b      	asrs	r3, r3, #8
 8000984:	b21b      	sxth	r3, r3
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <sendMessage+0x8c>)
 800098a:	711a      	strb	r2, [r3, #4]
	  Can_TxData[5] = Chassis_ctrl[2];
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <sendMessage+0x88>)
 800098e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <sendMessage+0x8c>)
 8000996:	715a      	strb	r2, [r3, #5]
	  Can_TxData[6] = Chassis_ctrl[3]>>8;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <sendMessage+0x88>)
 800099a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800099e:	121b      	asrs	r3, r3, #8
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <sendMessage+0x8c>)
 80009a6:	719a      	strb	r2, [r3, #6]
	  Can_TxData[7] = Chassis_ctrl[3];
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <sendMessage+0x88>)
 80009aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <sendMessage+0x8c>)
 80009b2:	71da      	strb	r2, [r3, #7]
	  HAL_CAN_AddTxMessage(&hcan1,&Can_cmdHeader[Motor_RightFriction_ID],Can_TxData,(uint32_t*)CAN_TX_MAILBOX0);
 80009b4:	2301      	movs	r3, #1
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <sendMessage+0x8c>)
 80009b8:	4904      	ldr	r1, [pc, #16]	; (80009cc <sendMessage+0x90>)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <sendMessage+0x94>)
 80009bc:	f000 fe68 	bl	8001690 <HAL_CAN_AddTxMessage>
  /* USER CODE END sendMessage */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000334 	.word	0x20000334
 80009c8:	20000170 	.word	0x20000170
 80009cc:	20000190 	.word	0x20000190
 80009d0:	20000344 	.word	0x20000344

080009d4 <ChassisCtrl>:
 * @brief	根据设定好的目标速度进行PID运算
 * @param	无
 * @retval	向底盘电机发送的can数据
 */
void ChassisCtrl(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
		for(int i=1;i<9;i++)
 80009da:	2301      	movs	r3, #1
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	e063      	b.n	8000aa8 <ChassisCtrl+0xd4>
			{
				PID_Incr(&PID_Motor_Speed[i],Motor[i].speed,Motor[i].target_speed);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2234      	movs	r2, #52	; 0x34
 80009e4:	fb02 f303 	mul.w	r3, r2, r3
 80009e8:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <ChassisCtrl+0xe4>)
 80009ea:	1899      	adds	r1, r3, r2
 80009ec:	4833      	ldr	r0, [pc, #204]	; (8000abc <ChassisCtrl+0xe8>)
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	4613      	mov	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4403      	add	r3, r0
 80009fa:	3302      	adds	r3, #2
 80009fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a00:	ee07 3a90 	vmov	s15, r3
 8000a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a08:	482c      	ldr	r0, [pc, #176]	; (8000abc <ChassisCtrl+0xe8>)
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4403      	add	r3, r0
 8000a16:	330c      	adds	r3, #12
 8000a18:	ed93 7a00 	vldr	s14, [r3]
 8000a1c:	eef0 0a47 	vmov.f32	s1, s14
 8000a20:	eeb0 0a67 	vmov.f32	s0, s15
 8000a24:	4608      	mov	r0, r1
 8000a26:	f000 fa4f 	bl	8000ec8 <PID_Incr>
				Chassis_ctrl[i-1] += PID_Motor_Speed[i].Output;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <ChassisCtrl+0xec>)
 8000a30:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a34:	ee07 3a90 	vmov	s15, r3
 8000a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <ChassisCtrl+0xe4>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2134      	movs	r1, #52	; 0x34
 8000a42:	fb01 f303 	mul.w	r3, r1, r3
 8000a46:	4413      	add	r3, r2
 8000a48:	3320      	adds	r3, #32
 8000a4a:	edd3 7a00 	vldr	s15, [r3]
 8000a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a5a:	ee17 2a90 	vmov	r2, s15
 8000a5e:	b211      	sxth	r1, r2
 8000a60:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <ChassisCtrl+0xec>)
 8000a62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(Chassis_ctrl[i-1]>16384)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <ChassisCtrl+0xec>)
 8000a6c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a74:	dd06      	ble.n	8000a84 <ChassisCtrl+0xb0>
					Chassis_ctrl[i-1] = 16384;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <ChassisCtrl+0xec>)
 8000a7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(Chassis_ctrl[i-1]<-16384)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <ChassisCtrl+0xec>)
 8000a8a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a8e:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8000a92:	da06      	bge.n	8000aa2 <ChassisCtrl+0xce>
					Chassis_ctrl[i-1] = -16384;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <ChassisCtrl+0xec>)
 8000a9a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000a9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=1;i<9;i++)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b08      	cmp	r3, #8
 8000aac:	dd98      	ble.n	80009e0 <ChassisCtrl+0xc>
			}
}
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000374 	.word	0x20000374
 8000abc:	200006b4 	.word	0x200006b4
 8000ac0:	20000334 	.word	0x20000334

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f000 fb2c 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f850 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f000 f8b8 	bl	8000c44 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000ad4:	f7ff fd7a 	bl	80005cc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  Can_MessageConfig();
 8000ad8:	f7ff fcf8 	bl	80004cc <Can_MessageConfig>
  Can_Filter1Config();
 8000adc:	f7ff fe14 	bl	8000708 <Can_Filter1Config>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	481a      	ldr	r0, [pc, #104]	; (8000b4c <main+0x88>)
 8000ae4:	f000 ffc1 	bl	8001a6a <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan1);
 8000ae8:	4818      	ldr	r0, [pc, #96]	; (8000b4c <main+0x88>)
 8000aea:	f000 fd8d 	bl	8001608 <HAL_CAN_Start>
  PID_Clear(&PID_Motor_Speed[0]);
 8000aee:	4818      	ldr	r0, [pc, #96]	; (8000b50 <main+0x8c>)
 8000af0:	f000 f9cc 	bl	8000e8c <PID_Clear>
  PID_Clear(&PID_Motor_Angle[0]);
 8000af4:	4817      	ldr	r0, [pc, #92]	; (8000b54 <main+0x90>)
 8000af6:	f000 f9c9 	bl	8000e8c <PID_Clear>
  PID_Init();
 8000afa:	f000 f8df 	bl	8000cbc <PID_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	Motor[1].target_speed = 0;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <main+0x94>)
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
	Motor[2].target_speed = 0;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <main+0x94>)
 8000b08:	f04f 0200 	mov.w	r2, #0
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8000b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b12:	f000 fb79 	bl	8001208 <HAL_Delay>
	Motor[1].target_speed = 3000;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <main+0x94>)
 8000b18:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <main+0x98>)
 8000b1a:	621a      	str	r2, [r3, #32]
	Motor[2].target_speed = -3000;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <main+0x94>)
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <main+0x9c>)
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
	Motor[3].target_speed = 1000;
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <main+0x94>)
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <main+0xa0>)
 8000b26:	649a      	str	r2, [r3, #72]	; 0x48
  while (1)
  {
	sendMessage();
 8000b28:	f7ff ff08 	bl	800093c <sendMessage>
	show_motor1=Motor[1].speed;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <main+0x94>)
 8000b2e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <main+0xa4>)
 8000b36:	601a      	str	r2, [r3, #0]
	show_motor2=-Motor[2].speed;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <main+0x94>)
 8000b3a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8000b3e:	425b      	negs	r3, r3
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <main+0xa8>)
 8000b42:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fb5f 	bl	8001208 <HAL_Delay>
	sendMessage();
 8000b4a:	e7ed      	b.n	8000b28 <main+0x64>
 8000b4c:	20000344 	.word	0x20000344
 8000b50:	20000374 	.word	0x20000374
 8000b54:	20000514 	.word	0x20000514
 8000b58:	200006b4 	.word	0x200006b4
 8000b5c:	453b8000 	.word	0x453b8000
 8000b60:	c53b8000 	.word	0xc53b8000
 8000b64:	447a0000 	.word	0x447a0000
 8000b68:	2000036c 	.word	0x2000036c
 8000b6c:	20000370 	.word	0x20000370

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b094      	sub	sp, #80	; 0x50
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0320 	add.w	r3, r7, #32
 8000b7a:	2230      	movs	r2, #48	; 0x30
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 f8be 	bl	8002d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <SystemClock_Config+0xcc>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	4a27      	ldr	r2, [pc, #156]	; (8000c3c <SystemClock_Config+0xcc>)
 8000b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba4:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <SystemClock_Config+0xcc>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <SystemClock_Config+0xd0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <SystemClock_Config+0xd0>)
 8000bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <SystemClock_Config+0xd0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000be0:	2306      	movs	r3, #6
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000be4:	23a8      	movs	r3, #168	; 0xa8
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bec:	2304      	movs	r3, #4
 8000bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	f107 0320 	add.w	r3, r7, #32
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fc3b 	bl	8002470 <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c00:	f000 f856 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c04:	230f      	movs	r3, #15
 8000c06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2105      	movs	r1, #5
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 fe9c 	bl	8002960 <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c2e:	f000 f83f 	bl	8000cb0 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3750      	adds	r7, #80	; 0x50
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40007000 	.word	0x40007000

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a16      	ldr	r2, [pc, #88]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <PID_Init>:
 * @param	无
 * @retval 	无
 * 备注：单独使用该文件时建议改为传参的形式
 */
void PID_Init()
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
	for(int i=0;i<8;i++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	e05e      	b.n	8000d86 <PID_Init+0xca>
	{
		PID_Motor_Speed[i].Kp = PID_SpeedCtrl_Config[i][0];
 8000cc8:	496c      	ldr	r1, [pc, #432]	; (8000e7c <PID_Init+0x1c0>)
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4969      	ldr	r1, [pc, #420]	; (8000e80 <PID_Init+0x1c4>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2034      	movs	r0, #52	; 0x34
 8000cde:	fb00 f303 	mul.w	r3, r0, r3
 8000ce2:	440b      	add	r3, r1
 8000ce4:	601a      	str	r2, [r3, #0]
		PID_Motor_Speed[i].Ki = PID_SpeedCtrl_Config[i][1];
 8000ce6:	4965      	ldr	r1, [pc, #404]	; (8000e7c <PID_Init+0x1c0>)
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4961      	ldr	r1, [pc, #388]	; (8000e80 <PID_Init+0x1c4>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2034      	movs	r0, #52	; 0x34
 8000cfe:	fb00 f303 	mul.w	r3, r0, r3
 8000d02:	440b      	add	r3, r1
 8000d04:	3304      	adds	r3, #4
 8000d06:	601a      	str	r2, [r3, #0]
		PID_Motor_Speed[i].Kd = PID_SpeedCtrl_Config[i][2];
 8000d08:	495c      	ldr	r1, [pc, #368]	; (8000e7c <PID_Init+0x1c0>)
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	3308      	adds	r3, #8
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4959      	ldr	r1, [pc, #356]	; (8000e80 <PID_Init+0x1c4>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2034      	movs	r0, #52	; 0x34
 8000d20:	fb00 f303 	mul.w	r3, r0, r3
 8000d24:	440b      	add	r3, r1
 8000d26:	3308      	adds	r3, #8
 8000d28:	601a      	str	r2, [r3, #0]
		PID_Motor_Speed[i].Output_Max = PID_SpeedCtrl_Config[i][3];
 8000d2a:	4954      	ldr	r1, [pc, #336]	; (8000e7c <PID_Init+0x1c0>)
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	330c      	adds	r3, #12
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4950      	ldr	r1, [pc, #320]	; (8000e80 <PID_Init+0x1c4>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2034      	movs	r0, #52	; 0x34
 8000d42:	fb00 f303 	mul.w	r3, r0, r3
 8000d46:	440b      	add	r3, r1
 8000d48:	3324      	adds	r3, #36	; 0x24
 8000d4a:	601a      	str	r2, [r3, #0]
		PID_Motor_Speed[i].Err_sum_Max = PID_SpeedCtrl_Config[i][4];
 8000d4c:	494b      	ldr	r1, [pc, #300]	; (8000e7c <PID_Init+0x1c0>)
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	440b      	add	r3, r1
 8000d5a:	3310      	adds	r3, #16
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4948      	ldr	r1, [pc, #288]	; (8000e80 <PID_Init+0x1c4>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2034      	movs	r0, #52	; 0x34
 8000d64:	fb00 f303 	mul.w	r3, r0, r3
 8000d68:	440b      	add	r3, r1
 8000d6a:	3328      	adds	r3, #40	; 0x28
 8000d6c:	601a      	str	r2, [r3, #0]
		PID_Motor_Speed[i].PID_Type = Speed;
 8000d6e:	4a44      	ldr	r2, [pc, #272]	; (8000e80 <PID_Init+0x1c4>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2134      	movs	r1, #52	; 0x34
 8000d74:	fb01 f303 	mul.w	r3, r1, r3
 8000d78:	4413      	add	r3, r2
 8000d7a:	332c      	adds	r3, #44	; 0x2c
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
	for(int i=0;i<8;i++)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3301      	adds	r3, #1
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b07      	cmp	r3, #7
 8000d8a:	dd9d      	ble.n	8000cc8 <PID_Init+0xc>
	}
	for(int i=0;i<8;i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	e069      	b.n	8000e66 <PID_Init+0x1aa>
	{
		PID_Motor_Angle[i].Kp = PID_AngleCtrl_Config[i][0];
 8000d92:	493c      	ldr	r1, [pc, #240]	; (8000e84 <PID_Init+0x1c8>)
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4939      	ldr	r1, [pc, #228]	; (8000e88 <PID_Init+0x1cc>)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2034      	movs	r0, #52	; 0x34
 8000da8:	fb00 f303 	mul.w	r3, r0, r3
 8000dac:	440b      	add	r3, r1
 8000dae:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].Ki = PID_AngleCtrl_Config[i][1];
 8000db0:	4934      	ldr	r1, [pc, #208]	; (8000e84 <PID_Init+0x1c8>)
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4931      	ldr	r1, [pc, #196]	; (8000e88 <PID_Init+0x1cc>)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	2034      	movs	r0, #52	; 0x34
 8000dc8:	fb00 f303 	mul.w	r3, r0, r3
 8000dcc:	440b      	add	r3, r1
 8000dce:	3304      	adds	r3, #4
 8000dd0:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].Kd = PID_AngleCtrl_Config[i][2];
 8000dd2:	492c      	ldr	r1, [pc, #176]	; (8000e84 <PID_Init+0x1c8>)
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	440b      	add	r3, r1
 8000de0:	3308      	adds	r3, #8
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4928      	ldr	r1, [pc, #160]	; (8000e88 <PID_Init+0x1cc>)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2034      	movs	r0, #52	; 0x34
 8000dea:	fb00 f303 	mul.w	r3, r0, r3
 8000dee:	440b      	add	r3, r1
 8000df0:	3308      	adds	r3, #8
 8000df2:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].Output_Max = PID_AngleCtrl_Config[i][3];
 8000df4:	4923      	ldr	r1, [pc, #140]	; (8000e84 <PID_Init+0x1c8>)
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	330c      	adds	r3, #12
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4920      	ldr	r1, [pc, #128]	; (8000e88 <PID_Init+0x1cc>)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2034      	movs	r0, #52	; 0x34
 8000e0c:	fb00 f303 	mul.w	r3, r0, r3
 8000e10:	440b      	add	r3, r1
 8000e12:	3324      	adds	r3, #36	; 0x24
 8000e14:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].Err_sum_Max = PID_AngleCtrl_Config[i][4];
 8000e16:	491b      	ldr	r1, [pc, #108]	; (8000e84 <PID_Init+0x1c8>)
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	3310      	adds	r3, #16
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4917      	ldr	r1, [pc, #92]	; (8000e88 <PID_Init+0x1cc>)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	2034      	movs	r0, #52	; 0x34
 8000e2e:	fb00 f303 	mul.w	r3, r0, r3
 8000e32:	440b      	add	r3, r1
 8000e34:	3328      	adds	r3, #40	; 0x28
 8000e36:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].PID_Type = Angle;
 8000e38:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <PID_Init+0x1cc>)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	2134      	movs	r1, #52	; 0x34
 8000e3e:	fb01 f303 	mul.w	r3, r1, r3
 8000e42:	4413      	add	r3, r2
 8000e44:	332c      	adds	r3, #44	; 0x2c
 8000e46:	2201      	movs	r2, #1
 8000e48:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].ID = i;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2d8      	uxtb	r0, r3
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <PID_Init+0x1cc>)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	2134      	movs	r1, #52	; 0x34
 8000e54:	fb01 f303 	mul.w	r3, r1, r3
 8000e58:	4413      	add	r3, r2
 8000e5a:	3330      	adds	r3, #48	; 0x30
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<8;i++)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2b07      	cmp	r3, #7
 8000e6a:	dd92      	ble.n	8000d92 <PID_Init+0xd6>
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000374 	.word	0x20000374
 8000e84:	200000a0 	.word	0x200000a0
 8000e88:	20000514 	.word	0x20000514

08000e8c <PID_Clear>:
 * @param	pid结构体
 * @retval 	无
 *
 */
void PID_Clear(PID_TypeDef *hpid)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	hpid->Output_Max = 0;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->Kp = 0;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
	hpid->Ki = 0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
	hpid->Kd = 0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
	hpid->Err_sum_Max = 0;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <PID_Incr>:
 * 		target_now		目标值
 * @retval 	控制量的增量
 *
 */
void PID_Incr(PID_TypeDef *hpid, float val_now, float target_now)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ed4:	edc7 0a01 	vstr	s1, [r7, #4]
	hpid->Err_now = target_now - val_now;
 8000ed8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000edc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	edc3 7a05 	vstr	s15, [r3, #20]
    hpid->Output = hpid->Kp*(hpid->Err_now - hpid->Err_last) + hpid->Ki*(hpid->Err_now)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	ed93 7a00 	vldr	s14, [r3]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	edd3 6a05 	vldr	s13, [r3, #20]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000efc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f14:	ee37 7a27 	vadd.f32	s14, s14, s15
    		+ hpid->Kd*(hpid->Err_now - hpid->Err_last - hpid->Err_diff);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	ed93 6a05 	vldr	s12, [r3, #20]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f2a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f34:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
    hpid->Output = hpid->Kp*(hpid->Err_now - hpid->Err_last) + hpid->Ki*(hpid->Err_now)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	edc3 7a08 	vstr	s15, [r3, #32]
	if(hpid->Output > hpid->Output_Max) hpid->Output = hpid->Output_Max;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5a:	dd03      	ble.n	8000f64 <PID_Incr+0x9c>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	621a      	str	r2, [r3, #32]
	if(hpid->Output < -hpid->Output_Max) hpid->Output = -hpid->Output_Max;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f70:	eef1 7a67 	vneg.f32	s15, s15
 8000f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	d507      	bpl.n	8000f8e <PID_Incr+0xc6>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f84:	eef1 7a67 	vneg.f32	s15, s15
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	edc3 7a08 	vstr	s15, [r3, #32]
	hpid->Err_diff = hpid->Err_now - hpid->Err_last;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	edc3 7a07 	vstr	s15, [r3, #28]
	hpid->Err_last = hpid->Err_now;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	611a      	str	r2, [r3, #16]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f8b8 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <CAN1_TX_IRQHandler+0x10>)
 8001062:	f000 fd28 	bl	8001ab6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000344 	.word	0x20000344

08001070 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <CAN1_RX0_IRQHandler+0x10>)
 8001076:	f000 fd1e 	bl	8001ab6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000344 	.word	0x20000344

08001084 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <CAN1_RX1_IRQHandler+0x10>)
 800108a:	f000 fd14 	bl	8001ab6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000344 	.word	0x20000344

08001098 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <CAN1_SCE_IRQHandler+0x10>)
 800109e:	f000 fd0a 	bl	8001ab6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000344 	.word	0x20000344

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ec:	4c0b      	ldr	r4, [pc, #44]	; (800111c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fa:	f7ff ffd7 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f001 fddb 	bl	8002cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fcdf 	bl	8000ac4 <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001114:	08002d48 	.word	0x08002d48
  ldr r2, =_sbss
 8001118:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 800111c:	20000758 	.word	0x20000758

08001120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <HAL_Init+0x40>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_Init+0x40>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x40>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 ffb1 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	200f      	movs	r0, #15
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff ff2e 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023c00 	.word	0x40023c00

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 ffc9 	bl	800211e <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 ff91 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000140 	.word	0x20000140
 80011c0:	20000148 	.word	0x20000148
 80011c4:	20000144 	.word	0x20000144

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000148 	.word	0x20000148
 80011ec:	20000754 	.word	0x20000754

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000754 	.word	0x20000754

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000148 	.word	0x20000148

08001250 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0ed      	b.n	800143e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff f9e2 	bl	8000638 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001284:	f7ff ffb4 	bl	80011f0 <HAL_GetTick>
 8001288:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800128a:	e012      	b.n	80012b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800128c:	f7ff ffb0 	bl	80011f0 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b0a      	cmp	r3, #10
 8001298:	d90b      	bls.n	80012b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2205      	movs	r2, #5
 80012aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0c5      	b.n	800143e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0e5      	beq.n	800128c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0202 	bic.w	r2, r2, #2
 80012ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d0:	f7ff ff8e 	bl	80011f0 <HAL_GetTick>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012d6:	e012      	b.n	80012fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012d8:	f7ff ff8a 	bl	80011f0 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b0a      	cmp	r3, #10
 80012e4:	d90b      	bls.n	80012fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2205      	movs	r2, #5
 80012f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e09f      	b.n	800143e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e5      	bne.n	80012d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7e1b      	ldrb	r3, [r3, #24]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d108      	bne.n	8001326 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	e007      	b.n	8001336 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7e5b      	ldrb	r3, [r3, #25]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d108      	bne.n	8001350 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e007      	b.n	8001360 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800135e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7e9b      	ldrb	r3, [r3, #26]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d108      	bne.n	800137a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0220 	orr.w	r2, r2, #32
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e007      	b.n	800138a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0220 	bic.w	r2, r2, #32
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7edb      	ldrb	r3, [r3, #27]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d108      	bne.n	80013a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0210 	bic.w	r2, r2, #16
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e007      	b.n	80013b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0210 	orr.w	r2, r2, #16
 80013b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7f1b      	ldrb	r3, [r3, #28]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d108      	bne.n	80013ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0208 	orr.w	r2, r2, #8
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e007      	b.n	80013de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0208 	bic.w	r2, r2, #8
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7f5b      	ldrb	r3, [r3, #29]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d108      	bne.n	80013f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0204 	orr.w	r2, r2, #4
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e007      	b.n	8001408 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0204 	bic.w	r2, r2, #4
 8001406:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	ea42 0103 	orr.w	r1, r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	1e5a      	subs	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001460:	7cfb      	ldrb	r3, [r7, #19]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d003      	beq.n	800146e <HAL_CAN_ConfigFilter+0x26>
 8001466:	7cfb      	ldrb	r3, [r7, #19]
 8001468:	2b02      	cmp	r3, #2
 800146a:	f040 80be 	bne.w	80015ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800146e:	4b65      	ldr	r3, [pc, #404]	; (8001604 <HAL_CAN_ConfigFilter+0x1bc>)
 8001470:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001478:	f043 0201 	orr.w	r2, r3, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001488:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	431a      	orrs	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	2201      	movs	r2, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	401a      	ands	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d123      	bne.n	8001518 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43db      	mvns	r3, r3
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3248      	adds	r2, #72	; 0x48
 80014f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800150c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800150e:	6979      	ldr	r1, [r7, #20]
 8001510:	3348      	adds	r3, #72	; 0x48
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d122      	bne.n	8001566 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	431a      	orrs	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001540:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3248      	adds	r2, #72	; 0x48
 8001546:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800155a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800155c:	6979      	ldr	r1, [r7, #20]
 800155e:	3348      	adds	r3, #72	; 0x48
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	401a      	ands	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001580:	e007      	b.n	8001592 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	431a      	orrs	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	401a      	ands	r2, r3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015ac:	e007      	b.n	80015be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d107      	bne.n	80015d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015dc:	f023 0201 	bic.w	r2, r3, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e006      	b.n	80015f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
  }
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40006400 	.word	0x40006400

08001608 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d12e      	bne.n	800167a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001634:	f7ff fddc 	bl	80011f0 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800163a:	e012      	b.n	8001662 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800163c:	f7ff fdd8 	bl	80011f0 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b0a      	cmp	r3, #10
 8001648:	d90b      	bls.n	8001662 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2205      	movs	r2, #5
 800165a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e012      	b.n	8001688 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e5      	bne.n	800163c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e006      	b.n	8001688 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
  }
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ae:	7ffb      	ldrb	r3, [r7, #31]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d003      	beq.n	80016bc <HAL_CAN_AddTxMessage+0x2c>
 80016b4:	7ffb      	ldrb	r3, [r7, #31]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	f040 80b8 	bne.w	800182c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10a      	bne.n	80016dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d105      	bne.n	80016dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80a0 	beq.w	800181c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	0e1b      	lsrs	r3, r3, #24
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d907      	bls.n	80016fc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e09e      	b.n	800183a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016fc:	2201      	movs	r2, #1
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	409a      	lsls	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10d      	bne.n	800172a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	6809      	ldr	r1, [r1, #0]
 800171c:	431a      	orrs	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3318      	adds	r3, #24
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	440b      	add	r3, r1
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e00f      	b.n	800174a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001734:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800173e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3318      	adds	r3, #24
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	440b      	add	r3, r1
 8001748:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6819      	ldr	r1, [r3, #0]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3318      	adds	r3, #24
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	440b      	add	r3, r1
 800175a:	3304      	adds	r3, #4
 800175c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	7d1b      	ldrb	r3, [r3, #20]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d111      	bne.n	800178a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3318      	adds	r3, #24
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	3304      	adds	r3, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	6811      	ldr	r1, [r2, #0]
 800177a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3318      	adds	r3, #24
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	440b      	add	r3, r1
 8001786:	3304      	adds	r3, #4
 8001788:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3307      	adds	r3, #7
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	061a      	lsls	r2, r3, #24
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3306      	adds	r3, #6
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3305      	adds	r3, #5
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	4313      	orrs	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	3204      	adds	r2, #4
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	4610      	mov	r0, r2
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	6811      	ldr	r1, [r2, #0]
 80017b2:	ea43 0200 	orr.w	r2, r3, r0
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	440b      	add	r3, r1
 80017bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80017c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3303      	adds	r3, #3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	061a      	lsls	r2, r3, #24
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3302      	adds	r3, #2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3301      	adds	r3, #1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	4313      	orrs	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	4610      	mov	r0, r2
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	6811      	ldr	r1, [r2, #0]
 80017e8:	ea43 0200 	orr.w	r2, r3, r0
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	440b      	add	r3, r1
 80017f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3318      	adds	r3, #24
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	6811      	ldr	r1, [r2, #0]
 800180a:	f043 0201 	orr.w	r2, r3, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3318      	adds	r3, #24
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	440b      	add	r3, r1
 8001816:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e00e      	b.n	800183a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e006      	b.n	800183a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
  }
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001846:	b480      	push	{r7}
 8001848:	b087      	sub	sp, #28
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d003      	beq.n	800186a <HAL_CAN_GetRxMessage+0x24>
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	2b02      	cmp	r3, #2
 8001866:	f040 80f3 	bne.w	8001a50 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10e      	bne.n	800188e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d116      	bne.n	80018ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0e7      	b.n	8001a5e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0d8      	b.n	8001a5e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	331b      	adds	r3, #27
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0204 	and.w	r2, r3, #4
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10c      	bne.n	80018e4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	331b      	adds	r3, #27
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0d5b      	lsrs	r3, r3, #21
 80018da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	331b      	adds	r3, #27
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	4413      	add	r3, r2
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	331b      	adds	r3, #27
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	4413      	add	r3, r2
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0202 	and.w	r2, r3, #2
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	331b      	adds	r3, #27
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	4413      	add	r3, r2
 800191e:	3304      	adds	r3, #4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 020f 	and.w	r2, r3, #15
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	331b      	adds	r3, #27
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	3304      	adds	r3, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b2da      	uxtb	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	331b      	adds	r3, #27
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4413      	add	r3, r2
 800194e:	3304      	adds	r3, #4
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0c1b      	lsrs	r3, r3, #16
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	4413      	add	r3, r2
 800197a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0a1a      	lsrs	r2, r3, #8
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0c1a      	lsrs	r2, r3, #16
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	3302      	adds	r3, #2
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0e1a      	lsrs	r2, r3, #24
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3303      	adds	r3, #3
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	3304      	adds	r3, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0a1a      	lsrs	r2, r3, #8
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	3305      	adds	r3, #5
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0c1a      	lsrs	r2, r3, #16
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	3306      	adds	r3, #6
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0e1a      	lsrs	r2, r3, #24
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	3307      	adds	r3, #7
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d108      	bne.n	8001a3c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0220 	orr.w	r2, r2, #32
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	e007      	b.n	8001a4c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0220 	orr.w	r2, r2, #32
 8001a4a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e006      	b.n	8001a5e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d002      	beq.n	8001a88 <HAL_CAN_ActivateNotification+0x1e>
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d109      	bne.n	8001a9c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6959      	ldr	r1, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e006      	b.n	8001aaa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b08a      	sub	sp, #40	; 0x28
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d07c      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d023      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f983 	bl	8001e24 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b1e:	e016      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	e00c      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	e002      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f989 	bl	8001e60 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d024      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f963 	bl	8001e38 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b72:	e016      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
 8001b86:	e00c      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9a:	e002      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f969 	bl	8001e74 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d024      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f943 	bl	8001e4c <HAL_CAN_TxMailbox2CompleteCallback>
 8001bc6:	e016      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bda:	e00c      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
 8001bee:	e002      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f949 	bl	8001e88 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2210      	movs	r2, #16
 8001c18:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00b      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2208      	movs	r2, #8
 8001c34:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f930 	bl	8001e9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7fe fd77 	bl	8000748 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2208      	movs	r2, #8
 8001c98:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f912 	bl	8001ec4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8f9 	bl	8001eb0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00b      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8fc 	bl	8001ed8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8f5 	bl	8001eec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d07b      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d072      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d043      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d03e      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d84:	2b60      	cmp	r3, #96	; 0x60
 8001d86:	d02b      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x32a>
 8001d88:	2b60      	cmp	r3, #96	; 0x60
 8001d8a:	d82e      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d8c:	2b50      	cmp	r3, #80	; 0x50
 8001d8e:	d022      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x320>
 8001d90:	2b50      	cmp	r3, #80	; 0x50
 8001d92:	d82a      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d019      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x316>
 8001d98:	2b40      	cmp	r3, #64	; 0x40
 8001d9a:	d826      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d9c:	2b30      	cmp	r3, #48	; 0x30
 8001d9e:	d010      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x30c>
 8001da0:	2b30      	cmp	r3, #48	; 0x30
 8001da2:	d822      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001da4:	2b10      	cmp	r3, #16
 8001da6:	d002      	beq.n	8001dae <HAL_CAN_IRQHandler+0x2f8>
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d005      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001dac:	e01d      	b.n	8001dea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001db6:	e019      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	f043 0310 	orr.w	r3, r3, #16
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dc0:	e014      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	f043 0320 	orr.w	r3, r3, #32
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dca:	e00f      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dd4:	e00a      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dde:	e005      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001de8:	e000      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            break;
 8001dea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dfa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2204      	movs	r2, #4
 8001e02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f872 	bl	8001f00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <__NVIC_EnableIRQ+0x38>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	; (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	; (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff8e 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff29 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff3e 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff8e 	bl	8002008 <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff31 	bl	8001f78 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e16b      	b.n	800242c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	f040 815a 	bne.w	8002426 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d005      	beq.n	800218a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002186:	2b02      	cmp	r3, #2
 8002188:	d130      	bne.n	80021ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c0:	2201      	movs	r2, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 0201 	and.w	r2, r3, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d017      	beq.n	8002228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d123      	bne.n	800227c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	08da      	lsrs	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3208      	adds	r2, #8
 8002276:	69b9      	ldr	r1, [r7, #24]
 8002278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80b4 	beq.w	8002426 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b60      	ldr	r3, [pc, #384]	; (8002444 <HAL_GPIO_Init+0x30c>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	4a5f      	ldr	r2, [pc, #380]	; (8002444 <HAL_GPIO_Init+0x30c>)
 80022c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022cc:	6453      	str	r3, [r2, #68]	; 0x44
 80022ce:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <HAL_GPIO_Init+0x30c>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022da:	4a5b      	ldr	r2, [pc, #364]	; (8002448 <HAL_GPIO_Init+0x310>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a52      	ldr	r2, [pc, #328]	; (800244c <HAL_GPIO_Init+0x314>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d02b      	beq.n	800235e <HAL_GPIO_Init+0x226>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a51      	ldr	r2, [pc, #324]	; (8002450 <HAL_GPIO_Init+0x318>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d025      	beq.n	800235a <HAL_GPIO_Init+0x222>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a50      	ldr	r2, [pc, #320]	; (8002454 <HAL_GPIO_Init+0x31c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01f      	beq.n	8002356 <HAL_GPIO_Init+0x21e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4f      	ldr	r2, [pc, #316]	; (8002458 <HAL_GPIO_Init+0x320>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d019      	beq.n	8002352 <HAL_GPIO_Init+0x21a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4e      	ldr	r2, [pc, #312]	; (800245c <HAL_GPIO_Init+0x324>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0x216>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4d      	ldr	r2, [pc, #308]	; (8002460 <HAL_GPIO_Init+0x328>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00d      	beq.n	800234a <HAL_GPIO_Init+0x212>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <HAL_GPIO_Init+0x32c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <HAL_GPIO_Init+0x20e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_GPIO_Init+0x330>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_GPIO_Init+0x20a>
 800233e:	2307      	movs	r3, #7
 8002340:	e00e      	b.n	8002360 <HAL_GPIO_Init+0x228>
 8002342:	2308      	movs	r3, #8
 8002344:	e00c      	b.n	8002360 <HAL_GPIO_Init+0x228>
 8002346:	2306      	movs	r3, #6
 8002348:	e00a      	b.n	8002360 <HAL_GPIO_Init+0x228>
 800234a:	2305      	movs	r3, #5
 800234c:	e008      	b.n	8002360 <HAL_GPIO_Init+0x228>
 800234e:	2304      	movs	r3, #4
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x228>
 8002352:	2303      	movs	r3, #3
 8002354:	e004      	b.n	8002360 <HAL_GPIO_Init+0x228>
 8002356:	2302      	movs	r3, #2
 8002358:	e002      	b.n	8002360 <HAL_GPIO_Init+0x228>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_GPIO_Init+0x228>
 800235e:	2300      	movs	r3, #0
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	f002 0203 	and.w	r2, r2, #3
 8002366:	0092      	lsls	r2, r2, #2
 8002368:	4093      	lsls	r3, r2
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002370:	4935      	ldr	r1, [pc, #212]	; (8002448 <HAL_GPIO_Init+0x310>)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_GPIO_Init+0x334>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023a2:	4a32      	ldr	r2, [pc, #200]	; (800246c <HAL_GPIO_Init+0x334>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_GPIO_Init+0x334>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023cc:	4a27      	ldr	r2, [pc, #156]	; (800246c <HAL_GPIO_Init+0x334>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_GPIO_Init+0x334>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f6:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_GPIO_Init+0x334>)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_GPIO_Init+0x334>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002420:	4a12      	ldr	r2, [pc, #72]	; (800246c <HAL_GPIO_Init+0x334>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3301      	adds	r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	f67f ae90 	bls.w	8002154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	40013800 	.word	0x40013800
 800244c:	40020000 	.word	0x40020000
 8002450:	40020400 	.word	0x40020400
 8002454:	40020800 	.word	0x40020800
 8002458:	40020c00 	.word	0x40020c00
 800245c:	40021000 	.word	0x40021000
 8002460:	40021400 	.word	0x40021400
 8002464:	40021800 	.word	0x40021800
 8002468:	40021c00 	.word	0x40021c00
 800246c:	40013c00 	.word	0x40013c00

08002470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e267      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d075      	beq.n	800257a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800248e:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d00c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249a:	4b85      	ldr	r3, [pc, #532]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d112      	bne.n	80024cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a6:	4b82      	ldr	r3, [pc, #520]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b2:	d10b      	bne.n	80024cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	4b7e      	ldr	r3, [pc, #504]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d05b      	beq.n	8002578 <HAL_RCC_OscConfig+0x108>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d157      	bne.n	8002578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e242      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d106      	bne.n	80024e4 <HAL_RCC_OscConfig+0x74>
 80024d6:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a75      	ldr	r2, [pc, #468]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e01d      	b.n	8002520 <HAL_RCC_OscConfig+0xb0>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x98>
 80024ee:	4b70      	ldr	r3, [pc, #448]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6f      	ldr	r2, [pc, #444]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a6c      	ldr	r2, [pc, #432]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0xb0>
 8002508:	4b69      	ldr	r3, [pc, #420]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a68      	ldr	r2, [pc, #416]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800250e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b66      	ldr	r3, [pc, #408]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a65      	ldr	r2, [pc, #404]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800251a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe fe62 	bl	80011f0 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fe5e 	bl	80011f0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e207      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0xc0>
 800254e:	e014      	b.n	800257a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fe4e 	bl	80011f0 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fe4a 	bl	80011f0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1f3      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	4b51      	ldr	r3, [pc, #324]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0xe8>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d063      	beq.n	800264e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002586:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002592:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259a:	2b08      	cmp	r3, #8
 800259c:	d11c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259e:	4b44      	ldr	r3, [pc, #272]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d116      	bne.n	80025d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_RCC_OscConfig+0x152>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e1c7      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4937      	ldr	r1, [pc, #220]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	e03a      	b.n	800264e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d020      	beq.n	8002622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCC_OscConfig+0x244>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7fe fe03 	bl	80011f0 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ee:	f7fe fdff 	bl	80011f0 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e1a8      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4925      	ldr	r1, [pc, #148]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]
 8002620:	e015      	b.n	800264e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_OscConfig+0x244>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7fe fde2 	bl	80011f0 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002630:	f7fe fdde 	bl	80011f0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e187      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d036      	beq.n	80026c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_RCC_OscConfig+0x248>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fdc2 	bl	80011f0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002670:	f7fe fdbe 	bl	80011f0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e167      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x200>
 800268e:	e01b      	b.n	80026c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_OscConfig+0x248>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fdab 	bl	80011f0 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	e00e      	b.n	80026bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269e:	f7fe fda7 	bl	80011f0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d907      	bls.n	80026bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e150      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
 80026b0:	40023800 	.word	0x40023800
 80026b4:	42470000 	.word	0x42470000
 80026b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	4b88      	ldr	r3, [pc, #544]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ea      	bne.n	800269e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8097 	beq.w	8002804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b81      	ldr	r3, [pc, #516]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10f      	bne.n	8002706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b7d      	ldr	r3, [pc, #500]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a7c      	ldr	r2, [pc, #496]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b7a      	ldr	r3, [pc, #488]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b77      	ldr	r3, [pc, #476]	; (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d118      	bne.n	8002744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002712:	4b74      	ldr	r3, [pc, #464]	; (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a73      	ldr	r2, [pc, #460]	; (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7fe fd67 	bl	80011f0 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe fd63 	bl	80011f0 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e10c      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCC_OscConfig+0x474>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x2ea>
 800274c:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a63      	ldr	r2, [pc, #396]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
 8002758:	e01c      	b.n	8002794 <HAL_RCC_OscConfig+0x324>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x30c>
 8002762:	4b5f      	ldr	r3, [pc, #380]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a5e      	ldr	r2, [pc, #376]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
 800276e:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	4a5b      	ldr	r2, [pc, #364]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0x324>
 800277c:	4b58      	ldr	r3, [pc, #352]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a57      	ldr	r2, [pc, #348]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	4b55      	ldr	r3, [pc, #340]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a54      	ldr	r2, [pc, #336]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fd28 	bl	80011f0 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7fe fd24 	bl	80011f0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0cb      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ee      	beq.n	80027a4 <HAL_RCC_OscConfig+0x334>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe fd12 	bl	80011f0 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe fd0e 	bl	80011f0 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0b5      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e6:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ee      	bne.n	80027d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b39      	ldr	r3, [pc, #228]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	4a38      	ldr	r2, [pc, #224]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a1 	beq.w	8002950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800280e:	4b34      	ldr	r3, [pc, #208]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b08      	cmp	r3, #8
 8002818:	d05c      	beq.n	80028d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d141      	bne.n	80028a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <HAL_RCC_OscConfig+0x478>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe fce2 	bl	80011f0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe fcde 	bl	80011f0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e087      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	019b      	lsls	r3, r3, #6
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	3b01      	subs	r3, #1
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	061b      	lsls	r3, r3, #24
 8002872:	491b      	ldr	r1, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x478>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fcb7 	bl	80011f0 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fcb3 	bl	80011f0 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e05c      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x416>
 80028a4:	e054      	b.n	8002950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_RCC_OscConfig+0x478>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe fca0 	bl	80011f0 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fc9c 	bl	80011f0 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e045      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCC_OscConfig+0x470>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x444>
 80028d2:	e03d      	b.n	8002950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d107      	bne.n	80028ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e038      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40007000 	.word	0x40007000
 80028e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_RCC_OscConfig+0x4ec>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d028      	beq.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d121      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d11a      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002924:	4293      	cmp	r3, r2
 8002926:	d111      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	3b01      	subs	r3, #1
 8002936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800

08002960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0cc      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d90c      	bls.n	800299c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b65      	ldr	r3, [pc, #404]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b63      	ldr	r3, [pc, #396]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0b8      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a58      	ldr	r2, [pc, #352]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029cc:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a52      	ldr	r2, [pc, #328]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d8:	4b50      	ldr	r3, [pc, #320]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	494d      	ldr	r1, [pc, #308]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d044      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d119      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e07f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e06f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e067      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3e:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4934      	ldr	r1, [pc, #208]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a50:	f7fe fbce 	bl	80011f0 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7fe fbca 	bl	80011f0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e04f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 020c 	and.w	r2, r3, #12
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1eb      	bne.n	8002a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a80:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d20c      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e032      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4916      	ldr	r1, [pc, #88]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	490e      	ldr	r1, [pc, #56]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ae6:	f000 f821 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	490a      	ldr	r1, [pc, #40]	; (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	5ccb      	ldrb	r3, [r1, r3]
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fb2e 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023c00 	.word	0x40023c00
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08002d28 	.word	0x08002d28
 8002b24:	20000140 	.word	0x20000140
 8002b28:	20000144 	.word	0x20000144

08002b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b30:	b090      	sub	sp, #64	; 0x40
 8002b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b44:	4b59      	ldr	r3, [pc, #356]	; (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d00d      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x40>
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	f200 80a1 	bhi.w	8002c98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x34>
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b5e:	e09b      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b64:	e09b      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b66:	4b53      	ldr	r3, [pc, #332]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b6a:	e098      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b6c:	4b4f      	ldr	r3, [pc, #316]	; (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b76:	4b4d      	ldr	r3, [pc, #308]	; (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d028      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	099b      	lsrs	r3, r3, #6
 8002b88:	2200      	movs	r2, #0
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	627a      	str	r2, [r7, #36]	; 0x24
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b94:	2100      	movs	r1, #0
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b98:	fb03 f201 	mul.w	r2, r3, r1
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a43      	ldr	r2, [pc, #268]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba6:	fba0 1202 	umull	r1, r2, r0, r2
 8002baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bac:	460a      	mov	r2, r1
 8002bae:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb2:	4413      	add	r3, r2
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb8:	2200      	movs	r2, #0
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	61fa      	str	r2, [r7, #28]
 8002bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bc6:	f7fd faff 	bl	80001c8 <__aeabi_uldivmod>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4613      	mov	r3, r2
 8002bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bd2:	e053      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd4:	4b35      	ldr	r3, [pc, #212]	; (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	2200      	movs	r2, #0
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	617a      	str	r2, [r7, #20]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002be6:	f04f 0b00 	mov.w	fp, #0
 8002bea:	4652      	mov	r2, sl
 8002bec:	465b      	mov	r3, fp
 8002bee:	f04f 0000 	mov.w	r0, #0
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	0159      	lsls	r1, r3, #5
 8002bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfc:	0150      	lsls	r0, r2, #5
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	ebb2 080a 	subs.w	r8, r2, sl
 8002c06:	eb63 090b 	sbc.w	r9, r3, fp
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002c22:	eb63 0509 	sbc.w	r5, r3, r9
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	00eb      	lsls	r3, r5, #3
 8002c30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c34:	00e2      	lsls	r2, r4, #3
 8002c36:	4614      	mov	r4, r2
 8002c38:	461d      	mov	r5, r3
 8002c3a:	eb14 030a 	adds.w	r3, r4, sl
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	eb45 030b 	adc.w	r3, r5, fp
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c52:	4629      	mov	r1, r5
 8002c54:	028b      	lsls	r3, r1, #10
 8002c56:	4621      	mov	r1, r4
 8002c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	028a      	lsls	r2, r1, #10
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	2200      	movs	r2, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	60fa      	str	r2, [r7, #12]
 8002c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c70:	f7fd faaa 	bl	80001c8 <__aeabi_uldivmod>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	3301      	adds	r3, #1
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c96:	e002      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3740      	adds	r7, #64	; 0x40
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	00f42400 	.word	0x00f42400
 8002cb4:	00b71b00 	.word	0x00b71b00

08002cb8 <__libc_init_array>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	4d0d      	ldr	r5, [pc, #52]	; (8002cf0 <__libc_init_array+0x38>)
 8002cbc:	4c0d      	ldr	r4, [pc, #52]	; (8002cf4 <__libc_init_array+0x3c>)
 8002cbe:	1b64      	subs	r4, r4, r5
 8002cc0:	10a4      	asrs	r4, r4, #2
 8002cc2:	2600      	movs	r6, #0
 8002cc4:	42a6      	cmp	r6, r4
 8002cc6:	d109      	bne.n	8002cdc <__libc_init_array+0x24>
 8002cc8:	4d0b      	ldr	r5, [pc, #44]	; (8002cf8 <__libc_init_array+0x40>)
 8002cca:	4c0c      	ldr	r4, [pc, #48]	; (8002cfc <__libc_init_array+0x44>)
 8002ccc:	f000 f820 	bl	8002d10 <_init>
 8002cd0:	1b64      	subs	r4, r4, r5
 8002cd2:	10a4      	asrs	r4, r4, #2
 8002cd4:	2600      	movs	r6, #0
 8002cd6:	42a6      	cmp	r6, r4
 8002cd8:	d105      	bne.n	8002ce6 <__libc_init_array+0x2e>
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
 8002cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce0:	4798      	blx	r3
 8002ce2:	3601      	adds	r6, #1
 8002ce4:	e7ee      	b.n	8002cc4 <__libc_init_array+0xc>
 8002ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cea:	4798      	blx	r3
 8002cec:	3601      	adds	r6, #1
 8002cee:	e7f2      	b.n	8002cd6 <__libc_init_array+0x1e>
 8002cf0:	08002d40 	.word	0x08002d40
 8002cf4:	08002d40 	.word	0x08002d40
 8002cf8:	08002d40 	.word	0x08002d40
 8002cfc:	08002d44 	.word	0x08002d44

08002d00 <memset>:
 8002d00:	4402      	add	r2, r0
 8002d02:	4603      	mov	r3, r0
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d100      	bne.n	8002d0a <memset+0xa>
 8002d08:	4770      	bx	lr
 8002d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d0e:	e7f9      	b.n	8002d04 <memset+0x4>

08002d10 <_init>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	bf00      	nop
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr

08002d1c <_fini>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	bf00      	nop
 8002d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d22:	bc08      	pop	{r3}
 8002d24:	469e      	mov	lr, r3
 8002d26:	4770      	bx	lr
