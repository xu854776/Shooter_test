
Shooter_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e4c  08004e4c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e54  08004e54  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08004e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00000700  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000084c  2000084c  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf75  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000225d  00000000  00000000  0002d0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0002f350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000850  00000000  00000000  0002fc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f45  00000000  00000000  000304c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c5a3  00000000  00000000  0005140d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4f74  00000000  00000000  0005d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00122924  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023ac  00000000  00000000  00122974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000014c 	.word	0x2000014c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e14 	.word	0x08004e14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000150 	.word	0x20000150
 80001c4:	08004e14 	.word	0x08004e14

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <feedDog>:
 * @brief	喂狗程序代码，放在需要进行检测的程序段中
 * @param	对应的看门狗指针（由用户自定义）
 * @retval	无
 */
void feedDog(WatchDog_t* hdog)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
//	hdog->status = 1;
	hdog->last_time = uwTick;
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <feedDog+0x1c>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	601a      	str	r2, [r3, #0]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	20000848 	.word	0x20000848

080004ec <Dog_Status_update>:
 * @brief	看门狗状态更新，放在任意能够稳定运行的程序段中
 * @param	对应的看门狗指针（由用户自定义）
 * @retval	无
 */
void Dog_Status_update(WatchDog_t* hdog)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	if(uwTick - hdog->last_time > OFFLINE_TIME)
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <Dog_Status_update+0x34>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000502:	d903      	bls.n	800050c <Dog_Status_update+0x20>
		hdog->status = 0;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	711a      	strb	r2, [r3, #4]
	else hdog->status = 1;
}
 800050a:	e002      	b.n	8000512 <Dog_Status_update+0x26>
	else hdog->status = 1;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2201      	movs	r2, #1
 8000510:	711a      	strb	r2, [r3, #4]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000848 	.word	0x20000848

08000524 <Can_MessageConfig>:
/* USER CODE END 0 */
/* CAN1 init function */

/* USER CODE BEGIN 1 */
void Can_MessageConfig(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
	for(int i=0; i<8; i++)           //无特殊情况批量设�?????
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	e052      	b.n	80005d6 <Can_MessageConfig+0xb2>
	{
		Can_cmdHeader[i].ExtId =   0x0;
 8000530:	493a      	ldr	r1, [pc, #232]	; (800061c <Can_MessageConfig+0xf8>)
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4613      	mov	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	4413      	add	r3, r2
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	440b      	add	r3, r1
 800053e:	3304      	adds	r3, #4
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
		Can_cmdHeader[i].IDE = CAN_ID_STD;
 8000544:	4935      	ldr	r1, [pc, #212]	; (800061c <Can_MessageConfig+0xf8>)
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	4613      	mov	r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4413      	add	r3, r2
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	440b      	add	r3, r1
 8000552:	3308      	adds	r3, #8
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
		Can_cmdHeader[i].RTR = CAN_RTR_DATA;
 8000558:	4930      	ldr	r1, [pc, #192]	; (800061c <Can_MessageConfig+0xf8>)
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4613      	mov	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	4413      	add	r3, r2
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	440b      	add	r3, r1
 8000566:	330c      	adds	r3, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
		Can_cmdHeader[i].DLC = 8;
 800056c:	492b      	ldr	r1, [pc, #172]	; (800061c <Can_MessageConfig+0xf8>)
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4613      	mov	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	440b      	add	r3, r1
 800057a:	3310      	adds	r3, #16
 800057c:	2208      	movs	r2, #8
 800057e:	601a      	str	r2, [r3, #0]
		Can_recHeader[i].ExtId = 0x0;
 8000580:	4927      	ldr	r1, [pc, #156]	; (8000620 <Can_MessageConfig+0xfc>)
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	4613      	mov	r3, r2
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	440b      	add	r3, r1
 800058e:	3304      	adds	r3, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
		Can_recHeader[i].IDE = CAN_ID_STD;
 8000594:	4922      	ldr	r1, [pc, #136]	; (8000620 <Can_MessageConfig+0xfc>)
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4613      	mov	r3, r2
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	440b      	add	r3, r1
 80005a2:	3308      	adds	r3, #8
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
		Can_recHeader[i].RTR = CAN_RTR_DATA;
 80005a8:	491d      	ldr	r1, [pc, #116]	; (8000620 <Can_MessageConfig+0xfc>)
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4613      	mov	r3, r2
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	440b      	add	r3, r1
 80005b6:	330c      	adds	r3, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
		Can_recHeader[i].DLC = 8;
 80005bc:	4918      	ldr	r1, [pc, #96]	; (8000620 <Can_MessageConfig+0xfc>)
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	4613      	mov	r3, r2
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	440b      	add	r3, r1
 80005ca:	3310      	adds	r3, #16
 80005cc:	2208      	movs	r2, #8
 80005ce:	601a      	str	r2, [r3, #0]
	for(int i=0; i<8; i++)           //无特殊情况批量设�?????
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b07      	cmp	r3, #7
 80005da:	dda9      	ble.n	8000530 <Can_MessageConfig+0xc>
	}
	Can_cmdHeader[Motor_RightFriction_ID].StdId = 0x200;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <Can_MessageConfig+0xf8>)
 80005de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e2:	619a      	str	r2, [r3, #24]
	Can_recHeader[Motor_RightFriction_ID].StdId = 0x201;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <Can_MessageConfig+0xfc>)
 80005e6:	f240 2201 	movw	r2, #513	; 0x201
 80005ea:	61da      	str	r2, [r3, #28]

	Can_cmdHeader[Motor_LeftFriction_ID].StdId = 0x200;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <Can_MessageConfig+0xf8>)
 80005ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005f2:	631a      	str	r2, [r3, #48]	; 0x30
	Can_recHeader[Motor_LeftFriction_ID].StdId = 0x202;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <Can_MessageConfig+0xfc>)
 80005f6:	f240 2202 	movw	r2, #514	; 0x202
 80005fa:	639a      	str	r2, [r3, #56]	; 0x38
//    Can_recHeader[Motor_Pitch_ID].StdId = 0x205;           //pitch id=1
//
//	Can_cmdHeader[Motor_Yaw_ID].StdId = 0x1FF;
//    Can_recHeader[Motor_Yaw_ID].StdId = 0x206;             //yaw id=2
//
	Can_cmdHeader[Motor_AmmoFeed_ID].StdId = 0x1FF;
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <Can_MessageConfig+0xf8>)
 80005fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000602:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    Can_recHeader[Motor_AmmoFeed_ID].StdId = 0x207;               //c610 id =7
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <Can_MessageConfig+0xfc>)
 8000608:	f240 2207 	movw	r2, #519	; 0x207
 800060c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4



}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	20000184 	.word	0x20000184
 8000620:	20000244 	.word	0x20000244

08000624 <MX_CAN1_Init>:
void MX_CAN1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_CAN1_Init+0x64>)
 800062a:	4a18      	ldr	r2, [pc, #96]	; (800068c <MX_CAN1_Init+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_CAN1_Init+0x64>)
 8000630:	2206      	movs	r2, #6
 8000632:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_CAN1_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_CAN1_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_CAN1_Init+0x64>)
 8000642:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000646:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_CAN1_Init+0x64>)
 800064a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800064e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_CAN1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_CAN1_Init+0x64>)
 8000658:	2201      	movs	r2, #1
 800065a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_CAN1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_CAN1_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_CAN1_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_CAN1_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_CAN1_Init+0x64>)
 8000676:	f001 f935 	bl	80018e4 <HAL_CAN_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000680:	f000 fc0a 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000350 	.word	0x20000350
 800068c:	40006400 	.word	0x40006400

08000690 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a29      	ldr	r2, [pc, #164]	; (8000754 <HAL_CAN_MspInit+0xc4>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d14b      	bne.n	800074a <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <HAL_CAN_MspInit+0xc8>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	4a27      	ldr	r2, [pc, #156]	; (8000758 <HAL_CAN_MspInit+0xc8>)
 80006bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c0:	6413      	str	r3, [r2, #64]	; 0x40
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <HAL_CAN_MspInit+0xc8>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <HAL_CAN_MspInit+0xc8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a20      	ldr	r2, [pc, #128]	; (8000758 <HAL_CAN_MspInit+0xc8>)
 80006d8:	f043 0308 	orr.w	r3, r3, #8
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <HAL_CAN_MspInit+0xc8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006ea:	2303      	movs	r3, #3
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006fa:	2309      	movs	r3, #9
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4815      	ldr	r0, [pc, #84]	; (800075c <HAL_CAN_MspInit+0xcc>)
 8000706:	f002 fc63 	bl	8002fd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2105      	movs	r1, #5
 800070e:	2013      	movs	r0, #19
 8000710:	f002 f825 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000714:	2013      	movs	r0, #19
 8000716:	f002 f83e 	bl	8002796 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2105      	movs	r1, #5
 800071e:	2014      	movs	r0, #20
 8000720:	f002 f81d 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000724:	2014      	movs	r0, #20
 8000726:	f002 f836 	bl	8002796 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2105      	movs	r1, #5
 800072e:	2015      	movs	r0, #21
 8000730:	f002 f815 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000734:	2015      	movs	r0, #21
 8000736:	f002 f82e 	bl	8002796 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2105      	movs	r1, #5
 800073e:	2016      	movs	r0, #22
 8000740:	f002 f80d 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000744:	2016      	movs	r0, #22
 8000746:	f002 f826 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	; 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40006400 	.word	0x40006400
 8000758:	40023800 	.word	0x40023800
 800075c:	40020c00 	.word	0x40020c00

08000760 <Can_Filter1Config>:
  }
}


void Can_Filter1Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef Filter_1;
	Filter_1.FilterActivation = ENABLE;
 8000766:	2301      	movs	r3, #1
 8000768:	623b      	str	r3, [r7, #32]
	Filter_1.FilterMode = CAN_FILTERMODE_IDMASK;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
	Filter_1.FilterScale = CAN_FILTERSCALE_16BIT;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
	Filter_1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
	Filter_1.FilterIdHigh = 0x0000;
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
	Filter_1.FilterIdLow = 0x0000;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
	Filter_1.FilterMaskIdHigh = 0x0000;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
	Filter_1.FilterMaskIdLow = 0x0000;                      //全部接收
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
	Filter_1.FilterBank = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
	HAL_CAN_ConfigFilter(&hcan1, &Filter_1);
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <Can_Filter1Config+0x3c>)
 8000790:	f001 f9a4 	bl	8001adc <HAL_CAN_ConfigFilter>
}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000350 	.word	0x20000350

080007a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a74      	ldr	r2, [pc, #464]	; (8000980 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	f040 80e0 	bne.w	8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
	{
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &sCan_RxHeader, Can_RxData);
 80007b4:	4b73      	ldr	r3, [pc, #460]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80007b6:	4a74      	ldr	r2, [pc, #464]	; (8000988 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	4874      	ldr	r0, [pc, #464]	; (800098c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80007bc:	f001 fb8d 	bl	8001eda <HAL_CAN_GetRxMessage>
		switch(sCan_RxHeader.StdId)
 80007c0:	4b71      	ldr	r3, [pc, #452]	; (8000988 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80007c8:	2b06      	cmp	r3, #6
 80007ca:	f200 80d4 	bhi.w	8000976 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 80007ce:	a201      	add	r2, pc, #4	; (adr r2, 80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80007d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d4:	080007f1 	.word	0x080007f1
 80007d8:	08000847 	.word	0x08000847
 80007dc:	0800089f 	.word	0x0800089f
 80007e0:	080008f9 	.word	0x080008f9
 80007e4:	08000977 	.word	0x08000977
 80007e8:	08000977 	.word	0x08000977
 80007ec:	08000957 	.word	0x08000957
		{
		case 0x201:
			Motor[1].speed = (uint16_t)(Can_RxData[2]<<8) + Can_RxData[3];
 80007f0:	4b64      	ldr	r3, [pc, #400]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80007f2:	789b      	ldrb	r3, [r3, #2]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b62      	ldr	r3, [pc, #392]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80007fc:	78db      	ldrb	r3, [r3, #3]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	4413      	add	r3, r2
 8000802:	b29b      	uxth	r3, r3
 8000804:	b21a      	sxth	r2, r3
 8000806:	4b62      	ldr	r3, [pc, #392]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000808:	82da      	strh	r2, [r3, #22]
			Motor[1].angle = ((Can_RxData[0]<<8) + Can_RxData[1]);
 800080a:	4b5e      	ldr	r3, [pc, #376]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b29b      	uxth	r3, r3
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	b29a      	uxth	r2, r3
 8000814:	4b5b      	ldr	r3, [pc, #364]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000816:	785b      	ldrb	r3, [r3, #1]
 8000818:	b29b      	uxth	r3, r3
 800081a:	4413      	add	r3, r2
 800081c:	b29a      	uxth	r2, r3
 800081e:	4b5c      	ldr	r3, [pc, #368]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000820:	829a      	strh	r2, [r3, #20]
			Motor[1].current = (uint16_t)(Can_RxData[4]<<8) + Can_RxData[5];
 8000822:	4b58      	ldr	r3, [pc, #352]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	b29b      	uxth	r3, r3
 8000828:	021b      	lsls	r3, r3, #8
 800082a:	b29a      	uxth	r2, r3
 800082c:	4b55      	ldr	r3, [pc, #340]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800082e:	795b      	ldrb	r3, [r3, #5]
 8000830:	b29b      	uxth	r3, r3
 8000832:	4413      	add	r3, r2
 8000834:	b29b      	uxth	r3, r3
 8000836:	b21a      	sxth	r2, r3
 8000838:	4b55      	ldr	r3, [pc, #340]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800083a:	831a      	strh	r2, [r3, #24]
			Motor[1].temp = Can_RxData[6];
 800083c:	4b51      	ldr	r3, [pc, #324]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800083e:	799a      	ldrb	r2, [r3, #6]
 8000840:	4b53      	ldr	r3, [pc, #332]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000842:	769a      	strb	r2, [r3, #26]
		break;
 8000844:	e097      	b.n	8000976 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
		case 0x202:
			Motor[2].speed = (uint16_t)(Can_RxData[2]<<8) + Can_RxData[3];
 8000846:	4b4f      	ldr	r3, [pc, #316]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	b29b      	uxth	r3, r3
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b4c      	ldr	r3, [pc, #304]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000852:	78db      	ldrb	r3, [r3, #3]
 8000854:	b29b      	uxth	r3, r3
 8000856:	4413      	add	r3, r2
 8000858:	b29b      	uxth	r3, r3
 800085a:	b21a      	sxth	r2, r3
 800085c:	4b4c      	ldr	r3, [pc, #304]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800085e:	855a      	strh	r2, [r3, #42]	; 0x2a
			Motor[2].angle = ((Can_RxData[0]<<8) + Can_RxData[1]);
 8000860:	4b48      	ldr	r3, [pc, #288]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b29b      	uxth	r3, r3
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b46      	ldr	r3, [pc, #280]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	b29b      	uxth	r3, r3
 8000870:	4413      	add	r3, r2
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b46      	ldr	r3, [pc, #280]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000876:	851a      	strh	r2, [r3, #40]	; 0x28
			Motor[2].current = (uint16_t)(Can_RxData[4]<<8) + Can_RxData[5];
 8000878:	4b42      	ldr	r3, [pc, #264]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800087a:	791b      	ldrb	r3, [r3, #4]
 800087c:	b29b      	uxth	r3, r3
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	b29a      	uxth	r2, r3
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000884:	795b      	ldrb	r3, [r3, #5]
 8000886:	b29b      	uxth	r3, r3
 8000888:	4413      	add	r3, r2
 800088a:	b29b      	uxth	r3, r3
 800088c:	b21a      	sxth	r2, r3
 800088e:	4b40      	ldr	r3, [pc, #256]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000890:	859a      	strh	r2, [r3, #44]	; 0x2c
			Motor[2].temp = Can_RxData[6];
 8000892:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000894:	799a      	ldrb	r2, [r3, #6]
 8000896:	4b3e      	ldr	r3, [pc, #248]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000898:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		break;
 800089c:	e06b      	b.n	8000976 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
		case 0x203:
			Motor[3].speed = (uint16_t)(Can_RxData[2]<<8) + Can_RxData[3];
 800089e:	4b39      	ldr	r3, [pc, #228]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008a0:	789b      	ldrb	r3, [r3, #2]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	4b36      	ldr	r3, [pc, #216]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008aa:	78db      	ldrb	r3, [r3, #3]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4413      	add	r3, r2
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	4b36      	ldr	r3, [pc, #216]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80008b6:	87da      	strh	r2, [r3, #62]	; 0x3e
			Motor[3].angle = ((Can_RxData[0]<<8) + Can_RxData[1]);
 80008b8:	4b32      	ldr	r3, [pc, #200]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b30      	ldr	r3, [pc, #192]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	4b30      	ldr	r3, [pc, #192]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80008ce:	879a      	strh	r2, [r3, #60]	; 0x3c
			Motor[3].current = (uint16_t)(Can_RxData[4]<<8) + Can_RxData[5];
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	b29a      	uxth	r2, r3
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008dc:	795b      	ldrb	r3, [r3, #5]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	4413      	add	r3, r2
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	b21a      	sxth	r2, r3
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80008e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			Motor[3].temp = Can_RxData[6];
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008ee:	799a      	ldrb	r2, [r3, #6]
 80008f0:	4b27      	ldr	r3, [pc, #156]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80008f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		break;
 80008f6:	e03e      	b.n	8000976 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
		case 0x204:
			Motor[4].speed = (uint16_t)(Can_RxData[2]<<8) + Can_RxData[3];
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80008fa:	789b      	ldrb	r3, [r3, #2]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000904:	78db      	ldrb	r3, [r3, #3]
 8000906:	b29b      	uxth	r3, r3
 8000908:	4413      	add	r3, r2
 800090a:	b29b      	uxth	r3, r3
 800090c:	b21a      	sxth	r2, r3
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000910:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			Motor[4].angle = ((Can_RxData[0]<<8) + Can_RxData[1]);
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b29b      	uxth	r3, r3
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	b29b      	uxth	r3, r3
 8000924:	4413      	add	r3, r2
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800092a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			Motor[4].current = (uint16_t)(Can_RxData[4]<<8) + Can_RxData[5];
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000930:	791b      	ldrb	r3, [r3, #4]
 8000932:	b29b      	uxth	r3, r3
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800093a:	795b      	ldrb	r3, [r3, #5]
 800093c:	b29b      	uxth	r3, r3
 800093e:	4413      	add	r3, r2
 8000940:	b29b      	uxth	r3, r3
 8000942:	b21a      	sxth	r2, r3
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000946:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			Motor[4].temp = Can_RxData[6];
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800094c:	799a      	ldrb	r2, [r3, #6]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000950:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		break;
 8000954:	e00f      	b.n	8000976 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
//			feedDog(&motor_WatchDog[6]);
//
//		break;

		case 0x207:
		     Motor[Motor_AmmoFeed_ID].speed = (uint16_t)(Can_RxData[2]<<8) + Can_RxData[3];
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000958:	789b      	ldrb	r3, [r3, #2]
 800095a:	b29b      	uxth	r3, r3
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000962:	78db      	ldrb	r3, [r3, #3]
 8000964:	b29b      	uxth	r3, r3
 8000966:	4413      	add	r3, r2
 8000968:	b29b      	uxth	r3, r3
 800096a:	b21a      	sxth	r2, r3
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800096e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		break;
 8000972:	e000      	b.n	8000976 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
		}


	}
 8000974:	bf00      	nop
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40006400 	.word	0x40006400
 8000984:	20000174 	.word	0x20000174
 8000988:	20000324 	.word	0x20000324
 800098c:	20000350 	.word	0x20000350
 8000990:	2000076c 	.word	0x2000076c

08000994 <sendMessage>:
#include "can.h"
int16_t Chassis_ctrl[8] = {0};
float speed_x = 0,speed_y = 0,omega = 0,speed_x_commend = 0,speed_y_commend = 0,angle_rad = 0;

void sendMessage(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN sendMessage */
  /* Infinite loop */
	  ChassisCtrl();
 8000998:	f000 f848 	bl	8000a2c <ChassisCtrl>
	  Can_TxData[0] = Chassis_ctrl[0]>>8;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <sendMessage+0x88>)
 800099e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a2:	121b      	asrs	r3, r3, #8
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <sendMessage+0x8c>)
 80009aa:	701a      	strb	r2, [r3, #0]
	  Can_TxData[1] = Chassis_ctrl[0];
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <sendMessage+0x88>)
 80009ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <sendMessage+0x8c>)
 80009b6:	705a      	strb	r2, [r3, #1]
	  Can_TxData[2] = Chassis_ctrl[1]>>8;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <sendMessage+0x88>)
 80009ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009be:	121b      	asrs	r3, r3, #8
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <sendMessage+0x8c>)
 80009c6:	709a      	strb	r2, [r3, #2]
	  Can_TxData[3] = Chassis_ctrl[1];
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <sendMessage+0x88>)
 80009ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <sendMessage+0x8c>)
 80009d2:	70da      	strb	r2, [r3, #3]
	  Can_TxData[4] = Chassis_ctrl[2]>>8;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <sendMessage+0x88>)
 80009d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009da:	121b      	asrs	r3, r3, #8
 80009dc:	b21b      	sxth	r3, r3
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <sendMessage+0x8c>)
 80009e2:	711a      	strb	r2, [r3, #4]
	  Can_TxData[5] = Chassis_ctrl[2];
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <sendMessage+0x88>)
 80009e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <sendMessage+0x8c>)
 80009ee:	715a      	strb	r2, [r3, #5]
	  Can_TxData[6] = Chassis_ctrl[3]>>8;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <sendMessage+0x88>)
 80009f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80009f6:	121b      	asrs	r3, r3, #8
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <sendMessage+0x8c>)
 80009fe:	719a      	strb	r2, [r3, #6]
	  Can_TxData[7] = Chassis_ctrl[3];
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <sendMessage+0x88>)
 8000a02:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <sendMessage+0x8c>)
 8000a0a:	71da      	strb	r2, [r3, #7]
	  HAL_CAN_AddTxMessage(&hcan1,&Can_cmdHeader[Motor_RightFriction_ID],Can_TxData,(uint32_t*)CAN_TX_MAILBOX0);
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <sendMessage+0x8c>)
 8000a10:	4904      	ldr	r1, [pc, #16]	; (8000a24 <sendMessage+0x90>)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <sendMessage+0x94>)
 8000a14:	f001 f986 	bl	8001d24 <HAL_CAN_AddTxMessage>
  /* USER CODE END sendMessage */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000340 	.word	0x20000340
 8000a20:	2000017c 	.word	0x2000017c
 8000a24:	2000019c 	.word	0x2000019c
 8000a28:	20000350 	.word	0x20000350

08000a2c <ChassisCtrl>:
 * @brief	根据设定好的目标速度进行PID运算
 * @param	无
 * @retval	向底盘电机发送的can数据
 */
void ChassisCtrl(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
		for(int i=1;i<9;i++)
 8000a32:	2301      	movs	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	e063      	b.n	8000b00 <ChassisCtrl+0xd4>
			{
				PID_Incr(&PID_Motor_Speed[i],Motor[i].speed,Motor[i].target_speed);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2234      	movs	r2, #52	; 0x34
 8000a3c:	fb02 f303 	mul.w	r3, r2, r3
 8000a40:	4a33      	ldr	r2, [pc, #204]	; (8000b10 <ChassisCtrl+0xe4>)
 8000a42:	1899      	adds	r1, r3, r2
 8000a44:	4833      	ldr	r0, [pc, #204]	; (8000b14 <ChassisCtrl+0xe8>)
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4403      	add	r3, r0
 8000a52:	3302      	adds	r3, #2
 8000a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a58:	ee07 3a90 	vmov	s15, r3
 8000a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a60:	482c      	ldr	r0, [pc, #176]	; (8000b14 <ChassisCtrl+0xe8>)
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4403      	add	r3, r0
 8000a6e:	330c      	adds	r3, #12
 8000a70:	ed93 7a00 	vldr	s14, [r3]
 8000a74:	eef0 0a47 	vmov.f32	s1, s14
 8000a78:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7c:	4608      	mov	r0, r1
 8000a7e:	f000 fb17 	bl	80010b0 <PID_Incr>
				Chassis_ctrl[i-1] += PID_Motor_Speed[i].Output;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <ChassisCtrl+0xec>)
 8000a88:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a8c:	ee07 3a90 	vmov	s15, r3
 8000a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a94:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <ChassisCtrl+0xe4>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2134      	movs	r1, #52	; 0x34
 8000a9a:	fb01 f303 	mul.w	r3, r1, r3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	3320      	adds	r3, #32
 8000aa2:	edd3 7a00 	vldr	s15, [r3]
 8000aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ab2:	ee17 2a90 	vmov	r2, s15
 8000ab6:	b211      	sxth	r1, r2
 8000ab8:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <ChassisCtrl+0xec>)
 8000aba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(Chassis_ctrl[i-1]>16384)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <ChassisCtrl+0xec>)
 8000ac4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000acc:	dd06      	ble.n	8000adc <ChassisCtrl+0xb0>
					Chassis_ctrl[i-1] = 16384;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <ChassisCtrl+0xec>)
 8000ad4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(Chassis_ctrl[i-1]<-16384)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <ChassisCtrl+0xec>)
 8000ae2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ae6:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8000aea:	da06      	bge.n	8000afa <ChassisCtrl+0xce>
					Chassis_ctrl[i-1] = -16384;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <ChassisCtrl+0xec>)
 8000af2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000af6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=1;i<9;i++)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3301      	adds	r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b08      	cmp	r3, #8
 8000b04:	dd98      	ble.n	8000a38 <ChassisCtrl+0xc>
			}
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000042c 	.word	0x2000042c
 8000b14:	2000076c 	.word	0x2000076c
 8000b18:	20000340 	.word	0x20000340

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 fe4a 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f8be 	bl	8000ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b28:	f000 f972 	bl	8000e10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b2c:	f000 f950 	bl	8000dd0 <MX_DMA_Init>
  MX_CAN1_Init();
 8000b30:	f7ff fd78 	bl	8000624 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8000b34:	f000 f920 	bl	8000d78 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Can_MessageConfig();
 8000b38:	f7ff fcf4 	bl	8000524 <Can_MessageConfig>
  Can_Filter1Config();
 8000b3c:	f7ff fe10 	bl	8000760 <Can_Filter1Config>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b40:	2102      	movs	r1, #2
 8000b42:	484b      	ldr	r0, [pc, #300]	; (8000c70 <main+0x154>)
 8000b44:	f001 fadb 	bl	80020fe <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan1);
 8000b48:	4849      	ldr	r0, [pc, #292]	; (8000c70 <main+0x154>)
 8000b4a:	f001 f8a7 	bl	8001c9c <HAL_CAN_Start>
  PID_Clear(&PID_Motor_Speed[0]);
 8000b4e:	4849      	ldr	r0, [pc, #292]	; (8000c74 <main+0x158>)
 8000b50:	f000 fa90 	bl	8001074 <PID_Clear>
  PID_Clear(&PID_Motor_Angle[0]);
 8000b54:	4848      	ldr	r0, [pc, #288]	; (8000c78 <main+0x15c>)
 8000b56:	f000 fa8d 	bl	8001074 <PID_Clear>
  PID_Init();
 8000b5a:	f000 f9a3 	bl	8000ea4 <PID_Init>
  /* USER CODE END 2 */
  HAL_UART_Receive_DMA(&huart3, RC_buff, RC_FRAME_LENGTH);//初始化遥控器DMA
 8000b5e:	2212      	movs	r2, #18
 8000b60:	4946      	ldr	r1, [pc, #280]	; (8000c7c <main+0x160>)
 8000b62:	4847      	ldr	r0, [pc, #284]	; (8000c80 <main+0x164>)
 8000b64:	f003 f875 	bl	8003c52 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);//IDLE 中断使能
 8000b68:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <main+0x164>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <main+0x164>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 0210 	orr.w	r2, r2, #16
 8000b76:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	Motor[1].target_speed = 0;
 8000b78:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <main+0x168>)
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
	Motor[2].target_speed = 0;
 8000b80:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <main+0x168>)
 8000b82:	f04f 0200 	mov.w	r2, #0
 8000b86:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8000b88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8c:	f000 fe86 	bl	800189c <HAL_Delay>
	Motor[1].target_speed = 0;//3000;//目前速度3000，可以打�?2m�?
 8000b90:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <main+0x168>)
 8000b92:	f04f 0200 	mov.w	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
	Motor[2].target_speed = 0;//-3000;
 8000b98:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <main+0x168>)
 8000b9a:	f04f 0200 	mov.w	r2, #0
 8000b9e:	635a      	str	r2, [r3, #52]	; 0x34
	Motor[3].target_speed = 0;//5000;
 8000ba0:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <main+0x168>)
 8000ba2:	f04f 0200 	mov.w	r2, #0
 8000ba6:	649a      	str	r2, [r3, #72]	; 0x48
  while (1)
  {
  Motor_Status = 1;
 8000ba8:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <main+0x16c>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
  Dog_Status_update(&remote_WatchDog);//remote WatchDog update
 8000bae:	4837      	ldr	r0, [pc, #220]	; (8000c8c <main+0x170>)
 8000bb0:	f7ff fc9c 	bl	80004ec <Dog_Status_update>
//	sendMessage();
  if(remote_WatchDog.status)
 8000bb4:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <main+0x170>)
 8000bb6:	791b      	ldrb	r3, [r3, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d048      	beq.n	8000c4e <main+0x132>
	{
	/****************遥控器控制*******************/
	friction_speed_commend = RC_Ctl.rc.ch2*5;
 8000bbc:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <main+0x174>)
 8000bbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a32      	ldr	r2, [pc, #200]	; (8000c94 <main+0x178>)
 8000bcc:	6013      	str	r3, [r2, #0]
	ammo_feed_commend = RC_Ctl.rc.ch4*5;
 8000bce:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <main+0x174>)
 8000bd0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a2e      	ldr	r2, [pc, #184]	; (8000c98 <main+0x17c>)
 8000bde:	6013      	str	r3, [r2, #0]
	if(RC_Ctl.rc.sw2 == 2)
 8000be0:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <main+0x174>)
 8000be2:	7a5b      	ldrb	r3, [r3, #9]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d121      	bne.n	8000c2c <main+0x110>
	{
		Motor[1].target_speed = friction_speed_commend;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <main+0x178>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <main+0x168>)
 8000bf6:	edc3 7a08 	vstr	s15, [r3, #32]
		Motor[2].target_speed = -friction_speed_commend;
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <main+0x178>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	425b      	negs	r3, r3
 8000c00:	ee07 3a90 	vmov	s15, r3
 8000c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <main+0x168>)
 8000c0a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		Motor[3].target_speed = ammo_feed_commend;
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <main+0x17c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	ee07 3a90 	vmov	s15, r3
 8000c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <main+0x168>)
 8000c1c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		sendMessage();
 8000c20:	f7ff feb8 	bl	8000994 <sendMessage>
		HAL_Delay(10);
 8000c24:	200a      	movs	r0, #10
 8000c26:	f000 fe39 	bl	800189c <HAL_Delay>
 8000c2a:	e010      	b.n	8000c4e <main+0x132>
	}
	else
	{
		Motor[1].target_speed = 0;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <main+0x168>)
 8000c2e:	f04f 0200 	mov.w	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
		Motor[2].target_speed = 0;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <main+0x168>)
 8000c36:	f04f 0200 	mov.w	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34
		Motor[3].target_speed = 0;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <main+0x168>)
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	649a      	str	r2, [r3, #72]	; 0x48
		sendMessage();
 8000c44:	f7ff fea6 	bl	8000994 <sendMessage>
		HAL_Delay(10);
 8000c48:	200a      	movs	r0, #10
 8000c4a:	f000 fe27 	bl	800189c <HAL_Delay>
	}
	}
	show_motor1=Motor[1].speed;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <main+0x168>)
 8000c50:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <main+0x180>)
 8000c58:	601a      	str	r2, [r3, #0]
	show_motor2=-Motor[2].speed;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <main+0x168>)
 8000c5c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8000c60:	425b      	negs	r3, r3
 8000c62:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <main+0x184>)
 8000c64:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fe18 	bl	800189c <HAL_Delay>
  Motor_Status = 1;
 8000c6c:	e79c      	b.n	8000ba8 <main+0x8c>
 8000c6e:	bf00      	nop
 8000c70:	20000350 	.word	0x20000350
 8000c74:	2000042c 	.word	0x2000042c
 8000c78:	200005cc 	.word	0x200005cc
 8000c7c:	20000824 	.word	0x20000824
 8000c80:	20000378 	.word	0x20000378
 8000c84:	2000076c 	.word	0x2000076c
 8000c88:	20000170 	.word	0x20000170
 8000c8c:	20000168 	.word	0x20000168
 8000c90:	2000080c 	.word	0x2000080c
 8000c94:	20000424 	.word	0x20000424
 8000c98:	20000428 	.word	0x20000428
 8000c9c:	2000041c 	.word	0x2000041c
 8000ca0:	20000420 	.word	0x20000420

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	; 0x50
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0320 	add.w	r3, r7, #32
 8000cae:	2230      	movs	r2, #48	; 0x30
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 f8a6 	bl	8004e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <SystemClock_Config+0xcc>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	4a27      	ldr	r2, [pc, #156]	; (8000d70 <SystemClock_Config+0xcc>)
 8000cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd8:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <SystemClock_Config+0xcc>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <SystemClock_Config+0xd0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <SystemClock_Config+0xd0>)
 8000cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <SystemClock_Config+0xd0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d00:	2301      	movs	r3, #1
 8000d02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000d14:	2306      	movs	r3, #6
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d18:	23a8      	movs	r3, #168	; 0xa8
 8000d1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 faed 	bl	8003308 <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d34:	f000 f8b0 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d38:	230f      	movs	r3, #15
 8000d3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2105      	movs	r1, #5
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 fd4e 	bl	80037f8 <HAL_RCC_ClockConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d62:	f000 f899 	bl	8000e98 <Error_Handler>
  }
}
 8000d66:	bf00      	nop
 8000d68:	3750      	adds	r7, #80	; 0x50
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40007000 	.word	0x40007000

08000d78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_USART3_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d84:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <MX_USART3_UART_Init+0x54>)
 8000d86:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d9c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000da0:	2204      	movs	r2, #4
 8000da2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000db2:	f002 ff01 	bl	8003bb8 <HAL_UART_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8000dbc:	f000 f86c 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000378 	.word	0x20000378
 8000dc8:	40004800 	.word	0x40004800
 8000dcc:	000186a0 	.word	0x000186a0

08000dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_DMA_Init+0x3c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <MX_DMA_Init+0x3c>)
 8000de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_DMA_Init+0x3c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	200c      	movs	r0, #12
 8000df8:	f001 fcb1 	bl	800275e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000dfc:	200c      	movs	r0, #12
 8000dfe:	f001 fcca 	bl	8002796 <HAL_NVIC_EnableIRQ>

}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_GPIO_Init+0x84>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <Error_Handler+0x8>
	...

08000ea4 <PID_Init>:
 * @param	无
 * @retval 	无
 * 备注：单独使用该文件时建议改为传参的形式
 */
void PID_Init()
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
	for(int i=0;i<8;i++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	e05e      	b.n	8000f6e <PID_Init+0xca>
	{
		PID_Motor_Speed[i].Kp = PID_SpeedCtrl_Config[i][0];
 8000eb0:	496c      	ldr	r1, [pc, #432]	; (8001064 <PID_Init+0x1c0>)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4969      	ldr	r1, [pc, #420]	; (8001068 <PID_Init+0x1c4>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2034      	movs	r0, #52	; 0x34
 8000ec6:	fb00 f303 	mul.w	r3, r0, r3
 8000eca:	440b      	add	r3, r1
 8000ecc:	601a      	str	r2, [r3, #0]
		PID_Motor_Speed[i].Ki = PID_SpeedCtrl_Config[i][1];
 8000ece:	4965      	ldr	r1, [pc, #404]	; (8001064 <PID_Init+0x1c0>)
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	3304      	adds	r3, #4
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4961      	ldr	r1, [pc, #388]	; (8001068 <PID_Init+0x1c4>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2034      	movs	r0, #52	; 0x34
 8000ee6:	fb00 f303 	mul.w	r3, r0, r3
 8000eea:	440b      	add	r3, r1
 8000eec:	3304      	adds	r3, #4
 8000eee:	601a      	str	r2, [r3, #0]
		PID_Motor_Speed[i].Kd = PID_SpeedCtrl_Config[i][2];
 8000ef0:	495c      	ldr	r1, [pc, #368]	; (8001064 <PID_Init+0x1c0>)
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	3308      	adds	r3, #8
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4959      	ldr	r1, [pc, #356]	; (8001068 <PID_Init+0x1c4>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2034      	movs	r0, #52	; 0x34
 8000f08:	fb00 f303 	mul.w	r3, r0, r3
 8000f0c:	440b      	add	r3, r1
 8000f0e:	3308      	adds	r3, #8
 8000f10:	601a      	str	r2, [r3, #0]
		PID_Motor_Speed[i].Output_Max = PID_SpeedCtrl_Config[i][3];
 8000f12:	4954      	ldr	r1, [pc, #336]	; (8001064 <PID_Init+0x1c0>)
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	330c      	adds	r3, #12
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4950      	ldr	r1, [pc, #320]	; (8001068 <PID_Init+0x1c4>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2034      	movs	r0, #52	; 0x34
 8000f2a:	fb00 f303 	mul.w	r3, r0, r3
 8000f2e:	440b      	add	r3, r1
 8000f30:	3324      	adds	r3, #36	; 0x24
 8000f32:	601a      	str	r2, [r3, #0]
		PID_Motor_Speed[i].Err_sum_Max = PID_SpeedCtrl_Config[i][4];
 8000f34:	494b      	ldr	r1, [pc, #300]	; (8001064 <PID_Init+0x1c0>)
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	3310      	adds	r3, #16
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4948      	ldr	r1, [pc, #288]	; (8001068 <PID_Init+0x1c4>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2034      	movs	r0, #52	; 0x34
 8000f4c:	fb00 f303 	mul.w	r3, r0, r3
 8000f50:	440b      	add	r3, r1
 8000f52:	3328      	adds	r3, #40	; 0x28
 8000f54:	601a      	str	r2, [r3, #0]
		PID_Motor_Speed[i].PID_Type = Speed;
 8000f56:	4a44      	ldr	r2, [pc, #272]	; (8001068 <PID_Init+0x1c4>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2134      	movs	r1, #52	; 0x34
 8000f5c:	fb01 f303 	mul.w	r3, r1, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	332c      	adds	r3, #44	; 0x2c
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
	for(int i=0;i<8;i++)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b07      	cmp	r3, #7
 8000f72:	dd9d      	ble.n	8000eb0 <PID_Init+0xc>
	}
	for(int i=0;i<8;i++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	e069      	b.n	800104e <PID_Init+0x1aa>
	{
		PID_Motor_Angle[i].Kp = PID_AngleCtrl_Config[i][0];
 8000f7a:	493c      	ldr	r1, [pc, #240]	; (800106c <PID_Init+0x1c8>)
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4939      	ldr	r1, [pc, #228]	; (8001070 <PID_Init+0x1cc>)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2034      	movs	r0, #52	; 0x34
 8000f90:	fb00 f303 	mul.w	r3, r0, r3
 8000f94:	440b      	add	r3, r1
 8000f96:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].Ki = PID_AngleCtrl_Config[i][1];
 8000f98:	4934      	ldr	r1, [pc, #208]	; (800106c <PID_Init+0x1c8>)
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4931      	ldr	r1, [pc, #196]	; (8001070 <PID_Init+0x1cc>)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2034      	movs	r0, #52	; 0x34
 8000fb0:	fb00 f303 	mul.w	r3, r0, r3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].Kd = PID_AngleCtrl_Config[i][2];
 8000fba:	492c      	ldr	r1, [pc, #176]	; (800106c <PID_Init+0x1c8>)
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3308      	adds	r3, #8
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4928      	ldr	r1, [pc, #160]	; (8001070 <PID_Init+0x1cc>)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	2034      	movs	r0, #52	; 0x34
 8000fd2:	fb00 f303 	mul.w	r3, r0, r3
 8000fd6:	440b      	add	r3, r1
 8000fd8:	3308      	adds	r3, #8
 8000fda:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].Output_Max = PID_AngleCtrl_Config[i][3];
 8000fdc:	4923      	ldr	r1, [pc, #140]	; (800106c <PID_Init+0x1c8>)
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	330c      	adds	r3, #12
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4920      	ldr	r1, [pc, #128]	; (8001070 <PID_Init+0x1cc>)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2034      	movs	r0, #52	; 0x34
 8000ff4:	fb00 f303 	mul.w	r3, r0, r3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3324      	adds	r3, #36	; 0x24
 8000ffc:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].Err_sum_Max = PID_AngleCtrl_Config[i][4];
 8000ffe:	491b      	ldr	r1, [pc, #108]	; (800106c <PID_Init+0x1c8>)
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	3310      	adds	r3, #16
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4917      	ldr	r1, [pc, #92]	; (8001070 <PID_Init+0x1cc>)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2034      	movs	r0, #52	; 0x34
 8001016:	fb00 f303 	mul.w	r3, r0, r3
 800101a:	440b      	add	r3, r1
 800101c:	3328      	adds	r3, #40	; 0x28
 800101e:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].PID_Type = Angle;
 8001020:	4a13      	ldr	r2, [pc, #76]	; (8001070 <PID_Init+0x1cc>)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2134      	movs	r1, #52	; 0x34
 8001026:	fb01 f303 	mul.w	r3, r1, r3
 800102a:	4413      	add	r3, r2
 800102c:	332c      	adds	r3, #44	; 0x2c
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
		PID_Motor_Angle[i].ID = i;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2d8      	uxtb	r0, r3
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <PID_Init+0x1cc>)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2134      	movs	r1, #52	; 0x34
 800103c:	fb01 f303 	mul.w	r3, r1, r3
 8001040:	4413      	add	r3, r2
 8001042:	3330      	adds	r3, #48	; 0x30
 8001044:	4602      	mov	r2, r0
 8001046:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<8;i++)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b07      	cmp	r3, #7
 8001052:	dd92      	ble.n	8000f7a <PID_Init+0xd6>
	}
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000000 	.word	0x20000000
 8001068:	2000042c 	.word	0x2000042c
 800106c:	200000a0 	.word	0x200000a0
 8001070:	200005cc 	.word	0x200005cc

08001074 <PID_Clear>:
 * @param	pid结构体
 * @retval 	无
 *
 */
void PID_Clear(PID_TypeDef *hpid)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	hpid->Output_Max = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->Kp = 0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
	hpid->Ki = 0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
	hpid->Kd = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
	hpid->Err_sum_Max = 0;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <PID_Incr>:
 * 		target_now		目标值
 * @retval 	控制量的增量
 *
 */
void PID_Incr(PID_TypeDef *hpid, float val_now, float target_now)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80010bc:	edc7 0a01 	vstr	s1, [r7, #4]
	hpid->Err_now = target_now - val_now;
 80010c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80010c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80010c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	edc3 7a05 	vstr	s15, [r3, #20]
    hpid->Output = hpid->Kp*(hpid->Err_now - hpid->Err_last) + hpid->Ki*(hpid->Err_now)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	ed93 7a00 	vldr	s14, [r3]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	edd3 6a05 	vldr	s13, [r3, #20]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80010e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80010f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fc:	ee37 7a27 	vadd.f32	s14, s14, s15
    		+ hpid->Kd*(hpid->Err_now - hpid->Err_last - hpid->Err_diff);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	edd3 6a02 	vldr	s13, [r3, #8]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	ed93 6a05 	vldr	s12, [r3, #20]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001112:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	edd3 7a07 	vldr	s15, [r3, #28]
 800111c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
    hpid->Output = hpid->Kp*(hpid->Err_now - hpid->Err_last) + hpid->Ki*(hpid->Err_now)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	edc3 7a08 	vstr	s15, [r3, #32]
	if(hpid->Output > hpid->Output_Max) hpid->Output = hpid->Output_Max;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	ed93 7a08 	vldr	s14, [r3, #32]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800113a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	dd03      	ble.n	800114c <PID_Incr+0x9c>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	621a      	str	r2, [r3, #32]
	if(hpid->Output < -hpid->Output_Max) hpid->Output = -hpid->Output_Max;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001158:	eef1 7a67 	vneg.f32	s15, s15
 800115c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	d507      	bpl.n	8001176 <PID_Incr+0xc6>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800116c:	eef1 7a67 	vneg.f32	s15, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a08 	vstr	s15, [r3, #32]
	hpid->Err_diff = hpid->Err_now - hpid->Err_last;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	ed93 7a05 	vldr	s14, [r3, #20]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	edc3 7a07 	vstr	s15, [r3, #28]
	hpid->Err_last = hpid->Err_now;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	695a      	ldr	r2, [r3, #20]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	611a      	str	r2, [r3, #16]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <RemoteRestart>:
void RemoteUnable(void)//关闭遥控器
{
	__HAL_RCC_USART3_CLK_DISABLE();
}
void RemoteRestart()//重启串口和DMA，针对于数据错位和无法进入回调
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
	__HAL_RCC_USART3_CLK_DISABLE();
 80011a6:	4b43      	ldr	r3, [pc, #268]	; (80012b4 <RemoteRestart+0x114>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a42      	ldr	r2, [pc, #264]	; (80012b4 <RemoteRestart+0x114>)
 80011ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_DMA1_CLK_DISABLE();
 80011b2:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <RemoteRestart+0x114>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a3f      	ldr	r2, [pc, #252]	; (80012b4 <RemoteRestart+0x114>)
 80011b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_DMA_CLEAR_FLAG(&hdma_usart3_rx,DMA_FLAG_TCIF1_5);
 80011be:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <RemoteRestart+0x118>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <RemoteRestart+0x11c>)
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d904      	bls.n	80011d4 <RemoteRestart+0x34>
 80011ca:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <RemoteRestart+0x120>)
 80011cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	e019      	b.n	8001208 <RemoteRestart+0x68>
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <RemoteRestart+0x118>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <RemoteRestart+0x124>)
 80011dc:	429a      	cmp	r2, r3
 80011de:	d904      	bls.n	80011ea <RemoteRestart+0x4a>
 80011e0:	4a37      	ldr	r2, [pc, #220]	; (80012c0 <RemoteRestart+0x120>)
 80011e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011e6:	6093      	str	r3, [r2, #8]
 80011e8:	e00e      	b.n	8001208 <RemoteRestart+0x68>
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <RemoteRestart+0x118>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <RemoteRestart+0x128>)
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d904      	bls.n	8001200 <RemoteRestart+0x60>
 80011f6:	4a35      	ldr	r2, [pc, #212]	; (80012cc <RemoteRestart+0x12c>)
 80011f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011fc:	60d3      	str	r3, [r2, #12]
 80011fe:	e003      	b.n	8001208 <RemoteRestart+0x68>
 8001200:	4a32      	ldr	r2, [pc, #200]	; (80012cc <RemoteRestart+0x12c>)
 8001202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001206:	6093      	str	r3, [r2, #8]
	__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <RemoteRestart+0x130>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <RemoteRestart+0x130>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
	__HAL_DMA_CLEAR_FLAG(&hdma_usart3_rx,DMA_IT_TC);
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <RemoteRestart+0x118>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <RemoteRestart+0x11c>)
 8001226:	429a      	cmp	r2, r3
 8001228:	d903      	bls.n	8001232 <RemoteRestart+0x92>
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <RemoteRestart+0x120>)
 800122c:	2210      	movs	r2, #16
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	e016      	b.n	8001260 <RemoteRestart+0xc0>
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <RemoteRestart+0x118>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <RemoteRestart+0x124>)
 800123a:	429a      	cmp	r2, r3
 800123c:	d903      	bls.n	8001246 <RemoteRestart+0xa6>
 800123e:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <RemoteRestart+0x120>)
 8001240:	2310      	movs	r3, #16
 8001242:	6093      	str	r3, [r2, #8]
 8001244:	e00c      	b.n	8001260 <RemoteRestart+0xc0>
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <RemoteRestart+0x118>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <RemoteRestart+0x128>)
 800124e:	429a      	cmp	r2, r3
 8001250:	d903      	bls.n	800125a <RemoteRestart+0xba>
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <RemoteRestart+0x12c>)
 8001254:	2310      	movs	r3, #16
 8001256:	60d3      	str	r3, [r2, #12]
 8001258:	e002      	b.n	8001260 <RemoteRestart+0xc0>
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <RemoteRestart+0x12c>)
 800125c:	2310      	movs	r3, #16
 800125e:	6093      	str	r3, [r2, #8]
    __HAL_RCC_USART3_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <RemoteRestart+0x114>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <RemoteRestart+0x114>)
 800126a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <RemoteRestart+0x114>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <RemoteRestart+0x114>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <RemoteRestart+0x114>)
 8001286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128a:	6313      	str	r3, [r2, #48]	; 0x30
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <RemoteRestart+0x114>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
    memset(&RC_Ctl, 0, sizeof(RC_Ctl));
 8001298:	2216      	movs	r2, #22
 800129a:	2100      	movs	r1, #0
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <RemoteRestart+0x134>)
 800129e:	f003 fdb1 	bl	8004e04 <memset>
    HAL_UART_Receive_DMA(&huart3, RC_buff, RC_FRAME_LENGTH);
 80012a2:	2212      	movs	r2, #18
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <RemoteRestart+0x138>)
 80012a6:	480a      	ldr	r0, [pc, #40]	; (80012d0 <RemoteRestart+0x130>)
 80012a8:	f002 fcd3 	bl	8003c52 <HAL_UART_Receive_DMA>
}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800
 80012b8:	200003bc 	.word	0x200003bc
 80012bc:	40026458 	.word	0x40026458
 80012c0:	40026400 	.word	0x40026400
 80012c4:	400260b8 	.word	0x400260b8
 80012c8:	40026058 	.word	0x40026058
 80012cc:	40026000 	.word	0x40026000
 80012d0:	20000378 	.word	0x20000378
 80012d4:	2000080c 	.word	0x2000080c
 80012d8:	20000824 	.word	0x20000824

080012dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a87      	ldr	r2, [pc, #540]	; (8001508 <HAL_UART_RxCpltCallback+0x22c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	f040 8108 	bne.w	8001500 <HAL_UART_RxCpltCallback+0x224>
	{
		feedDog(&remote_WatchDog);//进回调则喂狗
 80012f0:	4886      	ldr	r0, [pc, #536]	; (800150c <HAL_UART_RxCpltCallback+0x230>)
 80012f2:	f7ff f8eb 	bl	80004cc <feedDog>
		RC_Ctl.rc.ch1 = (RC_buff[0] | RC_buff[1] << 8) & 0x07FF;
 80012f6:	4b86      	ldr	r3, [pc, #536]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b84      	ldr	r3, [pc, #528]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 80012fe:	785b      	ldrb	r3, [r3, #1]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21b      	sxth	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b21b      	sxth	r3, r3
 8001308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b81      	ldr	r3, [pc, #516]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001310:	801a      	strh	r2, [r3, #0]
		RC_Ctl.rc.ch1 -= 1024;
 8001312:	4b80      	ldr	r3, [pc, #512]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001318:	b29b      	uxth	r3, r3
 800131a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800131e:	b29b      	uxth	r3, r3
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b7c      	ldr	r3, [pc, #496]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001324:	801a      	strh	r2, [r3, #0]
		RC_Ctl.rc.ch2 = (RC_buff[1] >> 3 | RC_buff[2] << 5) & 0x07FF;
 8001326:	4b7a      	ldr	r3, [pc, #488]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 8001328:	785b      	ldrb	r3, [r3, #1]
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b77      	ldr	r3, [pc, #476]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 8001332:	789b      	ldrb	r3, [r3, #2]
 8001334:	015b      	lsls	r3, r3, #5
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21b      	sxth	r3, r3
 800133c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b74      	ldr	r3, [pc, #464]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001344:	805a      	strh	r2, [r3, #2]
		RC_Ctl.rc.ch2 -= 1024;
 8001346:	4b73      	ldr	r3, [pc, #460]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001348:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800134c:	b29b      	uxth	r3, r3
 800134e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001352:	b29b      	uxth	r3, r3
 8001354:	b21a      	sxth	r2, r3
 8001356:	4b6f      	ldr	r3, [pc, #444]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001358:	805a      	strh	r2, [r3, #2]
		RC_Ctl.rc.ch3 = (RC_buff[2] >> 6 | RC_buff[3] << 2 | RC_buff[4] << 10) & 0x07FF;
 800135a:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 800135c:	789b      	ldrb	r3, [r3, #2]
 800135e:	099b      	lsrs	r3, r3, #6
 8001360:	b2db      	uxtb	r3, r3
 8001362:	b21a      	sxth	r2, r3
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 8001366:	78db      	ldrb	r3, [r3, #3]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	b21b      	sxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b67      	ldr	r3, [pc, #412]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 8001372:	791b      	ldrb	r3, [r3, #4]
 8001374:	029b      	lsls	r3, r3, #10
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21b      	sxth	r3, r3
 800137c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001380:	b21a      	sxth	r2, r3
 8001382:	4b64      	ldr	r3, [pc, #400]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001384:	809a      	strh	r2, [r3, #4]
		RC_Ctl.rc.ch3 -= 1024;
 8001386:	4b63      	ldr	r3, [pc, #396]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001388:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800138c:	b29b      	uxth	r3, r3
 800138e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001392:	b29b      	uxth	r3, r3
 8001394:	b21a      	sxth	r2, r3
 8001396:	4b5f      	ldr	r3, [pc, #380]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001398:	809a      	strh	r2, [r3, #4]
		RC_Ctl.rc.ch4 = (RC_buff[4] >> 1 | RC_buff[5] << 7) & 0x07FF;
 800139a:	4b5d      	ldr	r3, [pc, #372]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 800139c:	791b      	ldrb	r3, [r3, #4]
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	4b5a      	ldr	r3, [pc, #360]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 80013a6:	795b      	ldrb	r3, [r3, #5]
 80013a8:	01db      	lsls	r3, r3, #7
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	4b57      	ldr	r3, [pc, #348]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 80013b8:	80da      	strh	r2, [r3, #6]
		RC_Ctl.rc.ch4 -= 1024;
 80013ba:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 80013bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 80013cc:	80da      	strh	r2, [r3, #6]
	    /* prevent remote control zero deviation */
	    if (RC_Ctl.rc.ch1 <= 5 && RC_Ctl.rc.ch1 >= -5)
 80013ce:	4b51      	ldr	r3, [pc, #324]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 80013d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	dc08      	bgt.n	80013ea <HAL_UART_RxCpltCallback+0x10e>
 80013d8:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	f113 0f05 	cmn.w	r3, #5
 80013e2:	db02      	blt.n	80013ea <HAL_UART_RxCpltCallback+0x10e>
	    {
	    	RC_Ctl.rc.ch1 = 0;
 80013e4:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	801a      	strh	r2, [r3, #0]
	    }
	    if (RC_Ctl.rc.ch2 <= 5 && RC_Ctl.rc.ch2 >= -5)
 80013ea:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 80013ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	dc08      	bgt.n	8001406 <HAL_UART_RxCpltCallback+0x12a>
 80013f4:	4b47      	ldr	r3, [pc, #284]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 80013f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013fa:	f113 0f05 	cmn.w	r3, #5
 80013fe:	db02      	blt.n	8001406 <HAL_UART_RxCpltCallback+0x12a>
	    {
	    	RC_Ctl.rc.ch2 = 0;
 8001400:	4b44      	ldr	r3, [pc, #272]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001402:	2200      	movs	r2, #0
 8001404:	805a      	strh	r2, [r3, #2]
	    }
	    if (RC_Ctl.rc.ch3 <= 5 && RC_Ctl.rc.ch3 >= -5)
 8001406:	4b43      	ldr	r3, [pc, #268]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001408:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800140c:	2b05      	cmp	r3, #5
 800140e:	dc08      	bgt.n	8001422 <HAL_UART_RxCpltCallback+0x146>
 8001410:	4b40      	ldr	r3, [pc, #256]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001412:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001416:	f113 0f05 	cmn.w	r3, #5
 800141a:	db02      	blt.n	8001422 <HAL_UART_RxCpltCallback+0x146>
	    {
	    	RC_Ctl.rc.ch3 = 0;
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 800141e:	2200      	movs	r2, #0
 8001420:	809a      	strh	r2, [r3, #4]
	    }
	    if (RC_Ctl.rc.ch4 <= 5 && RC_Ctl.rc.ch4 >= -5)
 8001422:	4b3c      	ldr	r3, [pc, #240]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001424:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001428:	2b05      	cmp	r3, #5
 800142a:	dc08      	bgt.n	800143e <HAL_UART_RxCpltCallback+0x162>
 800142c:	4b39      	ldr	r3, [pc, #228]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 800142e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001432:	f113 0f05 	cmn.w	r3, #5
 8001436:	db02      	blt.n	800143e <HAL_UART_RxCpltCallback+0x162>
	    {
	    	RC_Ctl.rc.ch4 = 0;
 8001438:	4b36      	ldr	r3, [pc, #216]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 800143a:	2200      	movs	r2, #0
 800143c:	80da      	strh	r2, [r3, #6]
	    }

	    RC_Ctl.rc.sw1 = ((RC_buff[5] >> 4) & 0x000C) >> 2;
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	b2db      	uxtb	r3, r3
 8001446:	109b      	asrs	r3, r3, #2
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b30      	ldr	r3, [pc, #192]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001452:	721a      	strb	r2, [r3, #8]
	    RC_Ctl.rc.sw2 = (RC_buff[5] >> 4) & 0x0003;
 8001454:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 8001456:	795b      	ldrb	r3, [r3, #5]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001464:	725a      	strb	r2, [r3, #9]
	    if ((abs(RC_Ctl.rc.ch1) > 660) || \
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	2b00      	cmp	r3, #0
 800146e:	bfb8      	it	lt
 8001470:	425b      	neglt	r3, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001478:	d81d      	bhi.n	80014b6 <HAL_UART_RxCpltCallback+0x1da>
	            (abs(RC_Ctl.rc.ch2) > 660) || \
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 800147c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001480:	2b00      	cmp	r3, #0
 8001482:	bfb8      	it	lt
 8001484:	425b      	neglt	r3, r3
 8001486:	b29b      	uxth	r3, r3
	    if ((abs(RC_Ctl.rc.ch1) > 660) || \
 8001488:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 800148c:	d813      	bhi.n	80014b6 <HAL_UART_RxCpltCallback+0x1da>
	            (abs(RC_Ctl.rc.ch3) > 660) || \
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 8001490:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	bfb8      	it	lt
 8001498:	425b      	neglt	r3, r3
 800149a:	b29b      	uxth	r3, r3
	            (abs(RC_Ctl.rc.ch2) > 660) || \
 800149c:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80014a0:	d809      	bhi.n	80014b6 <HAL_UART_RxCpltCallback+0x1da>
	            (abs(RC_Ctl.rc.ch4) > 660))
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 80014a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bfb8      	it	lt
 80014ac:	425b      	neglt	r3, r3
 80014ae:	b29b      	uxth	r3, r3
	            (abs(RC_Ctl.rc.ch3) > 660) || \
 80014b0:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80014b4:	d907      	bls.n	80014c6 <HAL_UART_RxCpltCallback+0x1ea>
	    {
	        memset(&RC_Ctl, 0, sizeof(RC_Ctl));
 80014b6:	2216      	movs	r2, #22
 80014b8:	2100      	movs	r1, #0
 80014ba:	4816      	ldr	r0, [pc, #88]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 80014bc:	f003 fca2 	bl	8004e04 <memset>
	        RemoteRestart();
 80014c0:	f7ff fe6e 	bl	80011a0 <RemoteRestart>
	        return ;
 80014c4:	e01c      	b.n	8001500 <HAL_UART_RxCpltCallback+0x224>
//	    RC_Ctl.keyboard.Q = RC_buff[14] & 0x08;
//	    RC_Ctl.keyboard.E = RC_buff[14] & 0x04;
//	    RC_Ctl.keyboard.SHIFT = RC_buff[14] & 0x02;
//	    RC_Ctl.keyboard.CTRL = RC_buff[14] & 0x01;

	    RC_Ctl.rc.wheel = (RC_buff[16] | RC_buff[17] << 8) - 1024;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 80014c8:	7c1b      	ldrb	r3, [r3, #16]
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 80014ce:	7c5b      	ldrb	r3, [r3, #17]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	b29b      	uxth	r3, r3
 80014da:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_UART_RxCpltCallback+0x238>)
 80014e4:	815a      	strh	r2, [r3, #10]
	    HAL_UART_Receive_DMA(&huart3, RC_buff, RC_FRAME_LENGTH);//初始化DMA
 80014e6:	2212      	movs	r2, #18
 80014e8:	4909      	ldr	r1, [pc, #36]	; (8001510 <HAL_UART_RxCpltCallback+0x234>)
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <HAL_UART_RxCpltCallback+0x23c>)
 80014ec:	f002 fbb1 	bl	8003c52 <HAL_UART_Receive_DMA>
	    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);//IDLE 中断使能
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_UART_RxCpltCallback+0x23c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_UART_RxCpltCallback+0x23c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0210 	orr.w	r2, r2, #16
 80014fe:	60da      	str	r2, [r3, #12]
	}
}
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40004800 	.word	0x40004800
 800150c:	20000168 	.word	0x20000168
 8001510:	20000824 	.word	0x20000824
 8001514:	2000080c 	.word	0x2000080c
 8001518:	20000378 	.word	0x20000378

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <HAL_MspInit+0x4c>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_MspInit+0x4c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x4c>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x4c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a35      	ldr	r2, [pc, #212]	; (8001660 <HAL_UART_MspInit+0xf4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d164      	bne.n	8001658 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_UART_MspInit+0xf8>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a33      	ldr	r2, [pc, #204]	; (8001664 <HAL_UART_MspInit+0xf8>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_UART_MspInit+0xf8>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_UART_MspInit+0xf8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a2c      	ldr	r2, [pc, #176]	; (8001664 <HAL_UART_MspInit+0xf8>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <HAL_UART_MspInit+0xf8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80015c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d8:	2307      	movs	r3, #7
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4821      	ldr	r0, [pc, #132]	; (8001668 <HAL_UART_MspInit+0xfc>)
 80015e4:	f001 fcf4 	bl	8002fd0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_UART_MspInit+0x100>)
 80015ea:	4a21      	ldr	r2, [pc, #132]	; (8001670 <HAL_UART_MspInit+0x104>)
 80015ec:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_UART_MspInit+0x100>)
 80015f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_UART_MspInit+0x100>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_UART_MspInit+0x100>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_UART_MspInit+0x100>)
 8001604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001608:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_UART_MspInit+0x100>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_UART_MspInit+0x100>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_UART_MspInit+0x100>)
 8001618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_UART_MspInit+0x100>)
 8001620:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001624:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_UART_MspInit+0x100>)
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800162c:	480f      	ldr	r0, [pc, #60]	; (800166c <HAL_UART_MspInit+0x100>)
 800162e:	f001 f8cd 	bl	80027cc <HAL_DMA_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001638:	f7ff fc2e 	bl	8000e98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_UART_MspInit+0x100>)
 8001640:	639a      	str	r2, [r3, #56]	; 0x38
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_UART_MspInit+0x100>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2106      	movs	r1, #6
 800164c:	2027      	movs	r0, #39	; 0x27
 800164e:	f001 f886 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001652:	2027      	movs	r0, #39	; 0x27
 8001654:	f001 f89f 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40004800 	.word	0x40004800
 8001664:	40023800 	.word	0x40023800
 8001668:	40020800 	.word	0x40020800
 800166c:	200003bc 	.word	0x200003bc
 8001670:	40026028 	.word	0x40026028

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x4>

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c0:	f000 f8cc 	bl	800185c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <DMA1_Stream1_IRQHandler+0x10>)
 80016ce:	f001 fa15 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200003bc 	.word	0x200003bc

080016dc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <CAN1_TX_IRQHandler+0x10>)
 80016e2:	f000 fd32 	bl	800214a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000350 	.word	0x20000350

080016f0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <CAN1_RX0_IRQHandler+0x10>)
 80016f6:	f000 fd28 	bl	800214a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000350 	.word	0x20000350

08001704 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <CAN1_RX1_IRQHandler+0x10>)
 800170a:	f000 fd1e 	bl	800214a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000350 	.word	0x20000350

08001718 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <CAN1_SCE_IRQHandler+0x10>)
 800171e:	f000 fd14 	bl	800214a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000350 	.word	0x20000350

0800172c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <USART3_IRQHandler+0x10>)
 8001732:	f002 fabf 	bl	8003cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000378 	.word	0x20000378

08001740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <SystemInit+0x20>)
 8001746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <SystemInit+0x20>)
 800174c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800179c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001768:	480d      	ldr	r0, [pc, #52]	; (80017a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800176a:	490e      	ldr	r1, [pc, #56]	; (80017a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001780:	4c0b      	ldr	r4, [pc, #44]	; (80017b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800178e:	f7ff ffd7 	bl	8001740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001792:	f003 fb13 	bl	8004dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7ff f9c1 	bl	8000b1c <main>
  bx  lr    
 800179a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800179c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80017a8:	08004e5c 	.word	0x08004e5c
  ldr r2, =_sbss
 80017ac:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80017b0:	2000084c 	.word	0x2000084c

080017b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC_IRQHandler>
	...

080017b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <HAL_Init+0x40>)
 80017c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <HAL_Init+0x40>)
 80017ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <HAL_Init+0x40>)
 80017da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f000 ffb1 	bl	8002748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e6:	200f      	movs	r0, #15
 80017e8:	f000 f808 	bl	80017fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ec:	f7ff fe96 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_InitTick+0x54>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_InitTick+0x58>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001812:	fbb3 f3f1 	udiv	r3, r3, r1
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f000 ffc9 	bl	80027b2 <HAL_SYSTICK_Config>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00e      	b.n	8001848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d80a      	bhi.n	8001846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f000 ff91 	bl	800275e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800183c:	4a06      	ldr	r2, [pc, #24]	; (8001858 <HAL_InitTick+0x5c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000140 	.word	0x20000140
 8001854:	20000148 	.word	0x20000148
 8001858:	20000144 	.word	0x20000144

0800185c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x20>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_IncTick+0x24>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_IncTick+0x24>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000148 	.word	0x20000148
 8001880:	20000848 	.word	0x20000848

08001884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTick;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_GetTick+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000848 	.word	0x20000848

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff ffee 	bl	8001884 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffde 	bl	8001884 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000148 	.word	0x20000148

080018e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0ed      	b.n	8001ad2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe fec4 	bl	8000690 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001918:	f7ff ffb4 	bl	8001884 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800191e:	e012      	b.n	8001946 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001920:	f7ff ffb0 	bl	8001884 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b0a      	cmp	r3, #10
 800192c:	d90b      	bls.n	8001946 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2205      	movs	r2, #5
 800193e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e0c5      	b.n	8001ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0e5      	beq.n	8001920 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0202 	bic.w	r2, r2, #2
 8001962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001964:	f7ff ff8e 	bl	8001884 <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800196a:	e012      	b.n	8001992 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800196c:	f7ff ff8a 	bl	8001884 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b0a      	cmp	r3, #10
 8001978:	d90b      	bls.n	8001992 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2205      	movs	r2, #5
 800198a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e09f      	b.n	8001ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e5      	bne.n	800196c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7e1b      	ldrb	r3, [r3, #24]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d108      	bne.n	80019ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e007      	b.n	80019ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7e5b      	ldrb	r3, [r3, #25]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e007      	b.n	80019f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e9b      	ldrb	r3, [r3, #26]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d108      	bne.n	8001a0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e007      	b.n	8001a1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0220 	bic.w	r2, r2, #32
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7edb      	ldrb	r3, [r3, #27]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0210 	bic.w	r2, r2, #16
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e007      	b.n	8001a48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0210 	orr.w	r2, r2, #16
 8001a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7f1b      	ldrb	r3, [r3, #28]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d108      	bne.n	8001a62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0208 	orr.w	r2, r2, #8
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	e007      	b.n	8001a72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0208 	bic.w	r2, r2, #8
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7f5b      	ldrb	r3, [r3, #29]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0204 	orr.w	r2, r2, #4
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e007      	b.n	8001a9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0204 	bic.w	r2, r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	ea42 0103 	orr.w	r1, r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	1e5a      	subs	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001af4:	7cfb      	ldrb	r3, [r7, #19]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d003      	beq.n	8001b02 <HAL_CAN_ConfigFilter+0x26>
 8001afa:	7cfb      	ldrb	r3, [r7, #19]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	f040 80be 	bne.w	8001c7e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <HAL_CAN_ConfigFilter+0x1bc>)
 8001b04:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b0c:	f043 0201 	orr.w	r2, r3, #1
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	431a      	orrs	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	2201      	movs	r2, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	401a      	ands	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d123      	bne.n	8001bac <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b86:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3248      	adds	r2, #72	; 0x48
 8001b8c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ba0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ba2:	6979      	ldr	r1, [r7, #20]
 8001ba4:	3348      	adds	r3, #72	; 0x48
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d122      	bne.n	8001bfa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bd4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3248      	adds	r2, #72	; 0x48
 8001bda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bf0:	6979      	ldr	r1, [r7, #20]
 8001bf2:	3348      	adds	r3, #72	; 0x48
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c14:	e007      	b.n	8001c26 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	401a      	ands	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c40:	e007      	b.n	8001c52 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c70:	f023 0201 	bic.w	r2, r3, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e006      	b.n	8001c8c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
  }
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40006400 	.word	0x40006400

08001c9c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d12e      	bne.n	8001d0e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cc8:	f7ff fddc 	bl	8001884 <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cce:	e012      	b.n	8001cf6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cd0:	f7ff fdd8 	bl	8001884 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b0a      	cmp	r3, #10
 8001cdc:	d90b      	bls.n	8001cf6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2205      	movs	r2, #5
 8001cee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e012      	b.n	8001d1c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e5      	bne.n	8001cd0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e006      	b.n	8001d1c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d38:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d003      	beq.n	8001d50 <HAL_CAN_AddTxMessage+0x2c>
 8001d48:	7ffb      	ldrb	r3, [r7, #31]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	f040 80b8 	bne.w	8001ec0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10a      	bne.n	8001d70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d105      	bne.n	8001d70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80a0 	beq.w	8001eb0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	0e1b      	lsrs	r3, r3, #24
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d907      	bls.n	8001d90 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e09e      	b.n	8001ece <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d90:	2201      	movs	r2, #1
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	409a      	lsls	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10d      	bne.n	8001dbe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dac:	68f9      	ldr	r1, [r7, #12]
 8001dae:	6809      	ldr	r1, [r1, #0]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3318      	adds	r3, #24
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	440b      	add	r3, r1
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e00f      	b.n	8001dde <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dc8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dce:	68f9      	ldr	r1, [r7, #12]
 8001dd0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dd2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3318      	adds	r3, #24
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	440b      	add	r3, r1
 8001ddc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6819      	ldr	r1, [r3, #0]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3318      	adds	r3, #24
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	440b      	add	r3, r1
 8001dee:	3304      	adds	r3, #4
 8001df0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	7d1b      	ldrb	r3, [r3, #20]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d111      	bne.n	8001e1e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3318      	adds	r3, #24
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	4413      	add	r3, r2
 8001e06:	3304      	adds	r3, #4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	6811      	ldr	r1, [r2, #0]
 8001e0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3318      	adds	r3, #24
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	440b      	add	r3, r1
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3307      	adds	r3, #7
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	061a      	lsls	r2, r3, #24
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3306      	adds	r3, #6
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3305      	adds	r3, #5
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	3204      	adds	r2, #4
 8001e3e:	7812      	ldrb	r2, [r2, #0]
 8001e40:	4610      	mov	r0, r2
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	6811      	ldr	r1, [r2, #0]
 8001e46:	ea43 0200 	orr.w	r2, r3, r0
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	440b      	add	r3, r1
 8001e50:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e54:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3303      	adds	r3, #3
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061a      	lsls	r2, r3, #24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3302      	adds	r3, #2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4313      	orrs	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	7812      	ldrb	r2, [r2, #0]
 8001e76:	4610      	mov	r0, r2
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	6811      	ldr	r1, [r2, #0]
 8001e7c:	ea43 0200 	orr.w	r2, r3, r0
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	440b      	add	r3, r1
 8001e86:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3318      	adds	r3, #24
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	4413      	add	r3, r2
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	6811      	ldr	r1, [r2, #0]
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3318      	adds	r3, #24
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	440b      	add	r3, r1
 8001eaa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e00e      	b.n	8001ece <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e006      	b.n	8001ece <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
  }
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001eda:	b480      	push	{r7}
 8001edc:	b087      	sub	sp, #28
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d003      	beq.n	8001efe <HAL_CAN_GetRxMessage+0x24>
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	f040 80f3 	bne.w	80020e4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10e      	bne.n	8001f22 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d116      	bne.n	8001f40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0e7      	b.n	80020f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0d8      	b.n	80020f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	331b      	adds	r3, #27
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0204 	and.w	r2, r3, #4
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	331b      	adds	r3, #27
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	4413      	add	r3, r2
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0d5b      	lsrs	r3, r3, #21
 8001f6e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	331b      	adds	r3, #27
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	4413      	add	r3, r2
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	08db      	lsrs	r3, r3, #3
 8001f88:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	331b      	adds	r3, #27
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	4413      	add	r3, r2
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0202 	and.w	r2, r3, #2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	331b      	adds	r3, #27
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	331b      	adds	r3, #27
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	331b      	adds	r3, #27
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	0c1b      	lsrs	r3, r3, #16
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	4413      	add	r3, r2
 800200e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0a1a      	lsrs	r2, r3, #8
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	4413      	add	r3, r2
 8002028:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	0c1a      	lsrs	r2, r3, #16
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3302      	adds	r3, #2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	4413      	add	r3, r2
 8002042:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e1a      	lsrs	r2, r3, #24
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	3303      	adds	r3, #3
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	4413      	add	r3, r2
 800205c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	3304      	adds	r3, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	4413      	add	r3, r2
 8002074:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	0a1a      	lsrs	r2, r3, #8
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	3305      	adds	r3, #5
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	4413      	add	r3, r2
 800208e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0c1a      	lsrs	r2, r3, #16
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	3306      	adds	r3, #6
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0e1a      	lsrs	r2, r3, #24
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3307      	adds	r3, #7
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d108      	bne.n	80020d0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0220 	orr.w	r2, r2, #32
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	e007      	b.n	80020e0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e006      	b.n	80020f2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
  }
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d002      	beq.n	800211c <HAL_CAN_ActivateNotification+0x1e>
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d109      	bne.n	8002130 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6959      	ldr	r1, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e006      	b.n	800213e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b08a      	sub	sp, #40	; 0x28
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d07c      	beq.n	800228a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d023      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2201      	movs	r2, #1
 80021a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f983 	bl	80024b8 <HAL_CAN_TxMailbox0CompleteCallback>
 80021b2:	e016      	b.n	80021e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	e00c      	b.n	80021e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
 80021da:	e002      	b.n	80021e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f989 	bl	80024f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d024      	beq.n	8002236 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f963 	bl	80024cc <HAL_CAN_TxMailbox1CompleteCallback>
 8002206:	e016      	b.n	8002236 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	e00c      	b.n	8002236 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	e002      	b.n	8002236 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f969 	bl	8002508 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d024      	beq.n	800228a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002248:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f943 	bl	80024e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800225a:	e016      	b.n	800228a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d004      	beq.n	8002270 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	e00c      	b.n	800228a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	e002      	b.n	800228a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f949 	bl	800251c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00c      	beq.n	80022ae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2210      	movs	r2, #16
 80022ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00b      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2208      	movs	r2, #8
 80022c8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f930 	bl	8002530 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7fe fa59 	bl	80007a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00c      	beq.n	8002312 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d007      	beq.n	8002312 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002308:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2210      	movs	r2, #16
 8002310:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00b      	beq.n	8002334 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2208      	movs	r2, #8
 800232c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f912 	bl	8002558 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f8f9 	bl	8002544 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00b      	beq.n	8002374 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2210      	movs	r2, #16
 800236c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f8fc 	bl	800256c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2208      	movs	r2, #8
 800238e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f8f5 	bl	8002580 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d07b      	beq.n	8002498 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d072      	beq.n	8002490 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002404:	2b00      	cmp	r3, #0
 8002406:	d043      	beq.n	8002490 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800240e:	2b00      	cmp	r3, #0
 8002410:	d03e      	beq.n	8002490 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002418:	2b60      	cmp	r3, #96	; 0x60
 800241a:	d02b      	beq.n	8002474 <HAL_CAN_IRQHandler+0x32a>
 800241c:	2b60      	cmp	r3, #96	; 0x60
 800241e:	d82e      	bhi.n	800247e <HAL_CAN_IRQHandler+0x334>
 8002420:	2b50      	cmp	r3, #80	; 0x50
 8002422:	d022      	beq.n	800246a <HAL_CAN_IRQHandler+0x320>
 8002424:	2b50      	cmp	r3, #80	; 0x50
 8002426:	d82a      	bhi.n	800247e <HAL_CAN_IRQHandler+0x334>
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d019      	beq.n	8002460 <HAL_CAN_IRQHandler+0x316>
 800242c:	2b40      	cmp	r3, #64	; 0x40
 800242e:	d826      	bhi.n	800247e <HAL_CAN_IRQHandler+0x334>
 8002430:	2b30      	cmp	r3, #48	; 0x30
 8002432:	d010      	beq.n	8002456 <HAL_CAN_IRQHandler+0x30c>
 8002434:	2b30      	cmp	r3, #48	; 0x30
 8002436:	d822      	bhi.n	800247e <HAL_CAN_IRQHandler+0x334>
 8002438:	2b10      	cmp	r3, #16
 800243a:	d002      	beq.n	8002442 <HAL_CAN_IRQHandler+0x2f8>
 800243c:	2b20      	cmp	r3, #32
 800243e:	d005      	beq.n	800244c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002440:	e01d      	b.n	800247e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800244a:	e019      	b.n	8002480 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	f043 0310 	orr.w	r3, r3, #16
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002454:	e014      	b.n	8002480 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	f043 0320 	orr.w	r3, r3, #32
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800245e:	e00f      	b.n	8002480 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002468:	e00a      	b.n	8002480 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002472:	e005      	b.n	8002480 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800247c:	e000      	b.n	8002480 <HAL_CAN_IRQHandler+0x336>
            break;
 800247e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800248e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2204      	movs	r2, #4
 8002496:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f872 	bl	8002594 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024b0:	bf00      	nop
 80024b2:	3728      	adds	r7, #40	; 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	db0b      	blt.n	8002636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4907      	ldr	r1, [pc, #28]	; (8002644 <__NVIC_EnableIRQ+0x38>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2001      	movs	r0, #1
 800262e:	fa00 f202 	lsl.w	r2, r0, r2
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000e100 	.word	0xe000e100

08002648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	2b00      	cmp	r3, #0
 800265a:	db0a      	blt.n	8002672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	490c      	ldr	r1, [pc, #48]	; (8002694 <__NVIC_SetPriority+0x4c>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	440b      	add	r3, r1
 800266c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002670:	e00a      	b.n	8002688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4908      	ldr	r1, [pc, #32]	; (8002698 <__NVIC_SetPriority+0x50>)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	3b04      	subs	r3, #4
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	440b      	add	r3, r1
 8002686:	761a      	strb	r2, [r3, #24]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000e100 	.word	0xe000e100
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f1c3 0307 	rsb	r3, r3, #7
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	bf28      	it	cs
 80026ba:	2304      	movcs	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d902      	bls.n	80026cc <NVIC_EncodePriority+0x30>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3b03      	subs	r3, #3
 80026ca:	e000      	b.n	80026ce <NVIC_EncodePriority+0x32>
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	401a      	ands	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43d9      	mvns	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	4313      	orrs	r3, r2
         );
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002714:	d301      	bcc.n	800271a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002716:	2301      	movs	r3, #1
 8002718:	e00f      	b.n	800273a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <SysTick_Config+0x40>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002722:	210f      	movs	r1, #15
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f7ff ff8e 	bl	8002648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <SysTick_Config+0x40>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <SysTick_Config+0x40>)
 8002734:	2207      	movs	r2, #7
 8002736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	e000e010 	.word	0xe000e010

08002748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ff29 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002770:	f7ff ff3e 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 8002774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	6978      	ldr	r0, [r7, #20]
 800277c:	f7ff ff8e 	bl	800269c <NVIC_EncodePriority>
 8002780:	4602      	mov	r2, r0
 8002782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff5d 	bl	8002648 <__NVIC_SetPriority>
}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff31 	bl	800260c <__NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffa2 	bl	8002704 <SysTick_Config>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff f854 	bl	8001884 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e099      	b.n	800291c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002808:	e00f      	b.n	800282a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800280a:	f7ff f83b 	bl	8001884 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b05      	cmp	r3, #5
 8002816:	d908      	bls.n	800282a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2203      	movs	r2, #3
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e078      	b.n	800291c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e8      	bne.n	800280a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4b38      	ldr	r3, [pc, #224]	; (8002924 <HAL_DMA_Init+0x158>)
 8002844:	4013      	ands	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	2b04      	cmp	r3, #4
 8002882:	d107      	bne.n	8002894 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4313      	orrs	r3, r2
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0307 	bic.w	r3, r3, #7
 80028aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d117      	bne.n	80028ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fb01 	bl	8002ed8 <DMA_CheckFifoParam>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ea:	2301      	movs	r3, #1
 80028ec:	e016      	b.n	800291c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fab8 	bl	8002e6c <DMA_CalcBaseAndBitshift>
 80028fc:	4603      	mov	r3, r0
 80028fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	223f      	movs	r2, #63	; 0x3f
 8002906:	409a      	lsls	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	f010803f 	.word	0xf010803f

08002928 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_DMA_Start_IT+0x26>
 800294a:	2302      	movs	r3, #2
 800294c:	e040      	b.n	80029d0 <HAL_DMA_Start_IT+0xa8>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d12f      	bne.n	80029c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2202      	movs	r2, #2
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fa4a 	bl	8002e10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	223f      	movs	r2, #63	; 0x3f
 8002982:	409a      	lsls	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0216 	orr.w	r2, r2, #22
 8002996:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0208 	orr.w	r2, r2, #8
 80029ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e005      	b.n	80029ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
 80029cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029e6:	f7fe ff4d 	bl	8001884 <HAL_GetTick>
 80029ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d008      	beq.n	8002a0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e052      	b.n	8002ab0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0216 	bic.w	r2, r2, #22
 8002a18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_DMA_Abort+0x62>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0208 	bic.w	r2, r2, #8
 8002a48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a5a:	e013      	b.n	8002a84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a5c:	f7fe ff12 	bl	8001884 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d90c      	bls.n	8002a84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2203      	movs	r2, #3
 8002a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e015      	b.n	8002ab0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e4      	bne.n	8002a5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	223f      	movs	r2, #63	; 0x3f
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d004      	beq.n	8002ad6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00c      	b.n	8002af0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2205      	movs	r2, #5
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b08:	4b8e      	ldr	r3, [pc, #568]	; (8002d44 <HAL_DMA_IRQHandler+0x248>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a8e      	ldr	r2, [pc, #568]	; (8002d48 <HAL_DMA_IRQHandler+0x24c>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	2208      	movs	r2, #8
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01a      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0204 	bic.w	r2, r2, #4
 8002b4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	2208      	movs	r2, #8
 8002b56:	409a      	lsls	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	f043 0202 	orr.w	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	2210      	movs	r2, #16
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d043      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d03c      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d018      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d108      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d024      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
 8002c2a:	e01f      	b.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01b      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
 8002c3c:	e016      	b.n	8002c6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d107      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0208 	bic.w	r2, r2, #8
 8002c5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	2220      	movs	r2, #32
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 808f 	beq.w	8002d9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8087 	beq.w	8002d9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	2220      	movs	r2, #32
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d136      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0216 	bic.w	r2, r2, #22
 8002cb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_DMA_IRQHandler+0x1da>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0208 	bic.w	r2, r2, #8
 8002ce4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	223f      	movs	r2, #63	; 0x3f
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d07e      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
        }
        return;
 8002d12:	e079      	b.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01d      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d031      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
 8002d40:	e02c      	b.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
 8002d42:	bf00      	nop
 8002d44:	20000140 	.word	0x20000140
 8002d48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d023      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
 8002d5c:	e01e      	b.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10f      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0210 	bic.w	r2, r2, #16
 8002d7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d032      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d022      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2205      	movs	r2, #5
 8002db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d307      	bcc.n	8002de4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f2      	bne.n	8002dc8 <HAL_DMA_IRQHandler+0x2cc>
 8002de2:	e000      	b.n	8002de6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002de4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
 8002e06:	e000      	b.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e08:	bf00      	nop
    }
  }
}
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d108      	bne.n	8002e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e4e:	e007      	b.n	8002e60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	3b10      	subs	r3, #16
 8002e7c:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e86:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d909      	bls.n	8002eae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	1d1a      	adds	r2, r3, #4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	659a      	str	r2, [r3, #88]	; 0x58
 8002eac:	e007      	b.n	8002ebe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	aaaaaaab 	.word	0xaaaaaaab
 8002ed4:	08004e44 	.word	0x08004e44

08002ed8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11f      	bne.n	8002f32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d856      	bhi.n	8002fa6 <DMA_CheckFifoParam+0xce>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <DMA_CheckFifoParam+0x28>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f23 	.word	0x08002f23
 8002f08:	08002f11 	.word	0x08002f11
 8002f0c:	08002fa7 	.word	0x08002fa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d046      	beq.n	8002faa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f20:	e043      	b.n	8002faa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f2a:	d140      	bne.n	8002fae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f30:	e03d      	b.n	8002fae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3a:	d121      	bne.n	8002f80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d837      	bhi.n	8002fb2 <DMA_CheckFifoParam+0xda>
 8002f42:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <DMA_CheckFifoParam+0x70>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f59 	.word	0x08002f59
 8002f4c:	08002f5f 	.word	0x08002f5f
 8002f50:	08002f59 	.word	0x08002f59
 8002f54:	08002f71 	.word	0x08002f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5c:	e030      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d025      	beq.n	8002fb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6e:	e022      	b.n	8002fb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f78:	d11f      	bne.n	8002fba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f7e:	e01c      	b.n	8002fba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d903      	bls.n	8002f8e <DMA_CheckFifoParam+0xb6>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d003      	beq.n	8002f94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f8c:	e018      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
      break;
 8002f92:	e015      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa4:	e00b      	b.n	8002fbe <DMA_CheckFifoParam+0xe6>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e00a      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
 8002fac:	e008      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e006      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e004      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fbe:	bf00      	nop
    }
  } 
  
  return status; 
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop

08002fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	e16b      	b.n	80032c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fec:	2201      	movs	r2, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	429a      	cmp	r2, r3
 8003006:	f040 815a 	bne.w	80032be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d005      	beq.n	8003022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301e:	2b02      	cmp	r3, #2
 8003020:	d130      	bne.n	8003084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003058:	2201      	movs	r2, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 0201 	and.w	r2, r3, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b03      	cmp	r3, #3
 800308e:	d017      	beq.n	80030c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d123      	bne.n	8003114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	08da      	lsrs	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3208      	adds	r2, #8
 800310e:	69b9      	ldr	r1, [r7, #24]
 8003110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80b4 	beq.w	80032be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b60      	ldr	r3, [pc, #384]	; (80032dc <HAL_GPIO_Init+0x30c>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	4a5f      	ldr	r2, [pc, #380]	; (80032dc <HAL_GPIO_Init+0x30c>)
 8003160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003164:	6453      	str	r3, [r2, #68]	; 0x44
 8003166:	4b5d      	ldr	r3, [pc, #372]	; (80032dc <HAL_GPIO_Init+0x30c>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003172:	4a5b      	ldr	r2, [pc, #364]	; (80032e0 <HAL_GPIO_Init+0x310>)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <HAL_GPIO_Init+0x314>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d02b      	beq.n	80031f6 <HAL_GPIO_Init+0x226>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a51      	ldr	r2, [pc, #324]	; (80032e8 <HAL_GPIO_Init+0x318>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d025      	beq.n	80031f2 <HAL_GPIO_Init+0x222>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a50      	ldr	r2, [pc, #320]	; (80032ec <HAL_GPIO_Init+0x31c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01f      	beq.n	80031ee <HAL_GPIO_Init+0x21e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4f      	ldr	r2, [pc, #316]	; (80032f0 <HAL_GPIO_Init+0x320>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d019      	beq.n	80031ea <HAL_GPIO_Init+0x21a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4e      	ldr	r2, [pc, #312]	; (80032f4 <HAL_GPIO_Init+0x324>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_GPIO_Init+0x216>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4d      	ldr	r2, [pc, #308]	; (80032f8 <HAL_GPIO_Init+0x328>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00d      	beq.n	80031e2 <HAL_GPIO_Init+0x212>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4c      	ldr	r2, [pc, #304]	; (80032fc <HAL_GPIO_Init+0x32c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <HAL_GPIO_Init+0x20e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4b      	ldr	r2, [pc, #300]	; (8003300 <HAL_GPIO_Init+0x330>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_GPIO_Init+0x20a>
 80031d6:	2307      	movs	r3, #7
 80031d8:	e00e      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031da:	2308      	movs	r3, #8
 80031dc:	e00c      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031de:	2306      	movs	r3, #6
 80031e0:	e00a      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031e2:	2305      	movs	r3, #5
 80031e4:	e008      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031e6:	2304      	movs	r3, #4
 80031e8:	e006      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031ea:	2303      	movs	r3, #3
 80031ec:	e004      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e002      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031f6:	2300      	movs	r3, #0
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	f002 0203 	and.w	r2, r2, #3
 80031fe:	0092      	lsls	r2, r2, #2
 8003200:	4093      	lsls	r3, r2
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003208:	4935      	ldr	r1, [pc, #212]	; (80032e0 <HAL_GPIO_Init+0x310>)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800323a:	4a32      	ldr	r2, [pc, #200]	; (8003304 <HAL_GPIO_Init+0x334>)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003240:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003264:	4a27      	ldr	r2, [pc, #156]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_GPIO_Init+0x334>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b8:	4a12      	ldr	r2, [pc, #72]	; (8003304 <HAL_GPIO_Init+0x334>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3301      	adds	r3, #1
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b0f      	cmp	r3, #15
 80032c8:	f67f ae90 	bls.w	8002fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40013800 	.word	0x40013800
 80032e4:	40020000 	.word	0x40020000
 80032e8:	40020400 	.word	0x40020400
 80032ec:	40020800 	.word	0x40020800
 80032f0:	40020c00 	.word	0x40020c00
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40021400 	.word	0x40021400
 80032fc:	40021800 	.word	0x40021800
 8003300:	40021c00 	.word	0x40021c00
 8003304:	40013c00 	.word	0x40013c00

08003308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e267      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d075      	beq.n	8003412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00c      	beq.n	800334c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333a:	2b08      	cmp	r3, #8
 800333c:	d112      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334a:	d10b      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05b      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d157      	bne.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e242      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x74>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6f      	ldr	r2, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6c      	ldr	r2, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a68      	ldr	r2, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe fa60 	bl	8001884 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fe fa5c 	bl	8001884 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e207      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe fa4c 	bl	8001884 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fe fa48 	bl	8001884 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1f3      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c7      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4937      	ldr	r1, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x244>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe fa01 	bl	8001884 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003486:	f7fe f9fd 	bl	8001884 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a8      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4925      	ldr	r1, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x244>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe f9e0 	bl	8001884 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fe f9dc 	bl	8001884 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e187      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d036      	beq.n	8003560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fe f9c0 	bl	8001884 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003508:	f7fe f9bc 	bl	8001884 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e167      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x200>
 8003526:	e01b      	b.n	8003560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fe f9a9 	bl	8001884 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00e      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7fe f9a5 	bl	8001884 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d907      	bls.n	8003554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e150      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	42470000 	.word	0x42470000
 8003550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ea      	bne.n	8003536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8097 	beq.w	800369c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b81      	ldr	r3, [pc, #516]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	4b7d      	ldr	r3, [pc, #500]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b7a      	ldr	r3, [pc, #488]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fe f965 	bl	8001884 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fe f961 	bl	8001884 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e10c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ea>
 80035e4:	4b64      	ldr	r3, [pc, #400]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a63      	ldr	r2, [pc, #396]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	e01c      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x30c>
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5e      	ldr	r2, [pc, #376]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a5b      	ldr	r2, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 8003614:	4b58      	ldr	r3, [pc, #352]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a57      	ldr	r2, [pc, #348]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	4b55      	ldr	r3, [pc, #340]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fe f926 	bl	8001884 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fe f922 	bl	8001884 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0cb      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	4b49      	ldr	r3, [pc, #292]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ee      	beq.n	800363c <HAL_RCC_OscConfig+0x334>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003660:	f7fe f910 	bl	8001884 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fe f90c 	bl	8001884 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0b5      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ee      	bne.n	8003668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003690:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a38      	ldr	r2, [pc, #224]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80a1 	beq.w	80037e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d05c      	beq.n	800376c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d141      	bne.n	800373e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe f8e0 	bl	8001884 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe f8dc 	bl	8001884 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e087      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe f8b5 	bl	8001884 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371e:	f7fe f8b1 	bl	8001884 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e05c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x416>
 800373c:	e054      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe f89e 	bl	8001884 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe f89a 	bl	8001884 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e045      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x444>
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e038      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003778:	40023800 	.word	0x40023800
 800377c:	40007000 	.word	0x40007000
 8003780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x4ec>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d028      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d121      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d11a      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fd ffcc 	bl	8001884 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fd ffc8 	bl	8001884 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f821 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	490a      	ldr	r1, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd ff2c 	bl	80017fc <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	08004e2c 	.word	0x08004e2c
 80039bc:	20000140 	.word	0x20000140
 80039c0:	20000144 	.word	0x20000144

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c8:	b090      	sub	sp, #64	; 0x40
 80039ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	637b      	str	r3, [r7, #52]	; 0x34
 80039d0:	2300      	movs	r3, #0
 80039d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d4:	2300      	movs	r3, #0
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d00d      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x40>
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	f200 80a1 	bhi.w	8003b30 <HAL_RCC_GetSysClockFreq+0x16c>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x34>
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d003      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x3a>
 80039f6:	e09b      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x184>)
 80039fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80039fc:	e09b      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039fe:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a02:	e098      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a04:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0e:	4b4d      	ldr	r3, [pc, #308]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d028      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1a:	4b4a      	ldr	r3, [pc, #296]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	099b      	lsrs	r3, r3, #6
 8003a20:	2200      	movs	r2, #0
 8003a22:	623b      	str	r3, [r7, #32]
 8003a24:	627a      	str	r2, [r7, #36]	; 0x24
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a30:	fb03 f201 	mul.w	r2, r3, r1
 8003a34:	2300      	movs	r3, #0
 8003a36:	fb00 f303 	mul.w	r3, r0, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	4a43      	ldr	r2, [pc, #268]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a3e:	fba0 1202 	umull	r1, r2, r0, r2
 8003a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a44:	460a      	mov	r2, r1
 8003a46:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4a:	4413      	add	r3, r2
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a50:	2200      	movs	r2, #0
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	61fa      	str	r2, [r7, #28]
 8003a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a5e:	f7fc fbb3 	bl	80001c8 <__aeabi_uldivmod>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4613      	mov	r3, r2
 8003a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6a:	e053      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6c:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	2200      	movs	r2, #0
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	617a      	str	r2, [r7, #20]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a7e:	f04f 0b00 	mov.w	fp, #0
 8003a82:	4652      	mov	r2, sl
 8003a84:	465b      	mov	r3, fp
 8003a86:	f04f 0000 	mov.w	r0, #0
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	0159      	lsls	r1, r3, #5
 8003a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a94:	0150      	lsls	r0, r2, #5
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	ebb2 080a 	subs.w	r8, r2, sl
 8003a9e:	eb63 090b 	sbc.w	r9, r3, fp
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003aae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ab2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ab6:	ebb2 0408 	subs.w	r4, r2, r8
 8003aba:	eb63 0509 	sbc.w	r5, r3, r9
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	00eb      	lsls	r3, r5, #3
 8003ac8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003acc:	00e2      	lsls	r2, r4, #3
 8003ace:	4614      	mov	r4, r2
 8003ad0:	461d      	mov	r5, r3
 8003ad2:	eb14 030a 	adds.w	r3, r4, sl
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	eb45 030b 	adc.w	r3, r5, fp
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aea:	4629      	mov	r1, r5
 8003aec:	028b      	lsls	r3, r1, #10
 8003aee:	4621      	mov	r1, r4
 8003af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af4:	4621      	mov	r1, r4
 8003af6:	028a      	lsls	r2, r1, #10
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afe:	2200      	movs	r2, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	60fa      	str	r2, [r7, #12]
 8003b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b08:	f7fc fb5e 	bl	80001c8 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4613      	mov	r3, r2
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3740      	adds	r7, #64	; 0x40
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	00f42400 	.word	0x00f42400
 8003b4c:	00b71b00 	.word	0x00b71b00

08003b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000140 	.word	0x20000140

08003b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b6c:	f7ff fff0 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0a9b      	lsrs	r3, r3, #10
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	08004e3c 	.word	0x08004e3c

08003b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b94:	f7ff ffdc 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	0b5b      	lsrs	r3, r3, #13
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	08004e3c 	.word	0x08004e3c

08003bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e03f      	b.n	8003c4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fcc4 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fe69 	bl	80048d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d11d      	bne.n	8003ca8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_UART_Receive_DMA+0x26>
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e016      	b.n	8003caa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_Receive_DMA+0x38>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e00f      	b.n	8003caa <HAL_UART_Receive_DMA+0x58>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fbb8 	bl	8004414 <UART_Start_Receive_DMA>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	e000      	b.n	8003caa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ca8:	2302      	movs	r3, #2
  }
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b0ba      	sub	sp, #232	; 0xe8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <HAL_UART_IRQHandler+0x66>
 8003d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fd23 	bl	800475e <UART_Receive_IT>
      return;
 8003d18:	e256      	b.n	80041c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80de 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x22c>
 8003d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d106      	bne.n	8003d3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80d1 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_UART_IRQHandler+0xae>
 8003d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f043 0201 	orr.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_UART_IRQHandler+0xd2>
 8003d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f043 0202 	orr.w	r2, r3, #2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_UART_IRQHandler+0xf6>
 8003d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f043 0204 	orr.w	r2, r3, #4
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d011      	beq.n	8003dda <HAL_UART_IRQHandler+0x126>
 8003db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d105      	bne.n	8003dce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f043 0208 	orr.w	r2, r3, #8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 81ed 	beq.w	80041be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_UART_IRQHandler+0x14e>
 8003df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fcae 	bl	800475e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d103      	bne.n	8003e2e <HAL_UART_IRQHandler+0x17a>
 8003e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d04f      	beq.n	8003ece <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fbb6 	bl	80045a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b40      	cmp	r3, #64	; 0x40
 8003e40:	d141      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3314      	adds	r3, #20
 8003e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3314      	adds	r3, #20
 8003e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1d9      	bne.n	8003e42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d013      	beq.n	8003ebe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	4a7d      	ldr	r2, [pc, #500]	; (8004090 <HAL_UART_IRQHandler+0x3dc>)
 8003e9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fe08 	bl	8002ab8 <HAL_DMA_Abort_IT>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d016      	beq.n	8003edc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e00e      	b.n	8003edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f99a 	bl	80041f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e00a      	b.n	8003edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f996 	bl	80041f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	e006      	b.n	8003edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f992 	bl	80041f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003eda:	e170      	b.n	80041be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003edc:	bf00      	nop
    return;
 8003ede:	e16e      	b.n	80041be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	f040 814a 	bne.w	800417e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8143 	beq.w	800417e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 813c 	beq.w	800417e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	f040 80b4 	bne.w	8004094 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8140 	beq.w	80041c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	f080 8139 	bcs.w	80041c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f62:	f000 8088 	beq.w	8004076 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1d9      	bne.n	8003f66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3314      	adds	r3, #20
 8003fb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3314      	adds	r3, #20
 8003fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e1      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3314      	adds	r3, #20
 8003ff4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3314      	adds	r3, #20
 800400e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004012:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004014:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004018:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e3      	bne.n	8003fee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004046:	f023 0310 	bic.w	r3, r3, #16
 800404a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004058:	65ba      	str	r2, [r7, #88]	; 0x58
 800405a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800405e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e3      	bne.n	8004034 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe fcb1 	bl	80029d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800407e:	b29b      	uxth	r3, r3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	b29b      	uxth	r3, r3
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8c0 	bl	800420c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800408c:	e099      	b.n	80041c2 <HAL_UART_IRQHandler+0x50e>
 800408e:	bf00      	nop
 8004090:	08004667 	.word	0x08004667
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800409c:	b29b      	uxth	r3, r3
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 808b 	beq.w	80041c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8086 	beq.w	80041c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	330c      	adds	r3, #12
 80040c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040de:	647a      	str	r2, [r7, #68]	; 0x44
 80040e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e3      	bne.n	80040ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3314      	adds	r3, #20
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	623b      	str	r3, [r7, #32]
   return(result);
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3314      	adds	r3, #20
 8004112:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004116:	633a      	str	r2, [r7, #48]	; 0x30
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e3      	bne.n	80040f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	60fb      	str	r3, [r7, #12]
   return(result);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0310 	bic.w	r3, r3, #16
 800414e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800415c:	61fa      	str	r2, [r7, #28]
 800415e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	69b9      	ldr	r1, [r7, #24]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	617b      	str	r3, [r7, #20]
   return(result);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e3      	bne.n	8004138 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004174:	4619      	mov	r1, r3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f848 	bl	800420c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800417c:	e023      	b.n	80041c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <HAL_UART_IRQHandler+0x4ea>
 800418a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa79 	bl	800468e <UART_Transmit_IT>
    return;
 800419c:	e014      	b.n	80041c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00e      	beq.n	80041c8 <HAL_UART_IRQHandler+0x514>
 80041aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fab9 	bl	800472e <UART_EndTransmit_IT>
    return;
 80041bc:	e004      	b.n	80041c8 <HAL_UART_IRQHandler+0x514>
    return;
 80041be:	bf00      	nop
 80041c0:	e002      	b.n	80041c8 <HAL_UART_IRQHandler+0x514>
      return;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <HAL_UART_IRQHandler+0x514>
      return;
 80041c6:	bf00      	nop
  }
}
 80041c8:	37e8      	adds	r7, #232	; 0xe8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop

080041d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b09c      	sub	sp, #112	; 0x70
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d172      	bne.n	8004326 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004242:	2200      	movs	r2, #0
 8004244:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800425c:	66bb      	str	r3, [r7, #104]	; 0x68
 800425e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004266:	65ba      	str	r2, [r7, #88]	; 0x58
 8004268:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800426c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e5      	bne.n	8004246 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3314      	adds	r3, #20
 8004280:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800428a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	667b      	str	r3, [r7, #100]	; 0x64
 8004292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3314      	adds	r3, #20
 8004298:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800429a:	647a      	str	r2, [r7, #68]	; 0x44
 800429c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e5      	bne.n	800427a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3314      	adds	r3, #20
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	623b      	str	r3, [r7, #32]
   return(result);
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c4:	663b      	str	r3, [r7, #96]	; 0x60
 80042c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042ce:	633a      	str	r2, [r7, #48]	; 0x30
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e5      	bne.n	80042ae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d119      	bne.n	8004326 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	60fb      	str	r3, [r7, #12]
   return(result);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f023 0310 	bic.w	r3, r3, #16
 8004308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004312:	61fa      	str	r2, [r7, #28]
 8004314:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	617b      	str	r3, [r7, #20]
   return(result);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	2b01      	cmp	r3, #1
 800432c:	d106      	bne.n	800433c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004332:	4619      	mov	r1, r3
 8004334:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004336:	f7ff ff69 	bl	800420c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800433a:	e002      	b.n	8004342 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800433c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800433e:	f7fc ffcd 	bl	80012dc <HAL_UART_RxCpltCallback>
}
 8004342:	bf00      	nop
 8004344:	3770      	adds	r7, #112	; 0x70
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	2b01      	cmp	r3, #1
 800435e:	d108      	bne.n	8004372 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	b29b      	uxth	r3, r3
 8004368:	4619      	mov	r1, r3
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff ff4e 	bl	800420c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004370:	e002      	b.n	8004378 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff ff36 	bl	80041e4 <HAL_UART_RxHalfCpltCallback>
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439c:	2b80      	cmp	r3, #128	; 0x80
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b21      	cmp	r3, #33	; 0x21
 80043b2:	d108      	bne.n	80043c6 <UART_DMAError+0x46>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2200      	movs	r2, #0
 80043be:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80043c0:	68b8      	ldr	r0, [r7, #8]
 80043c2:	f000 f8c5 	bl	8004550 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d0:	2b40      	cmp	r3, #64	; 0x40
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b22      	cmp	r3, #34	; 0x22
 80043e6:	d108      	bne.n	80043fa <UART_DMAError+0x7a>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2200      	movs	r2, #0
 80043f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80043f4:	68b8      	ldr	r0, [r7, #8]
 80043f6:	f000 f8d3 	bl	80045a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0210 	orr.w	r2, r3, #16
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004406:	68b8      	ldr	r0, [r7, #8]
 8004408:	f7ff fef6 	bl	80041f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800440c:	bf00      	nop
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b098      	sub	sp, #96	; 0x60
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2222      	movs	r2, #34	; 0x22
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	4a40      	ldr	r2, [pc, #256]	; (8004544 <UART_Start_Receive_DMA+0x130>)
 8004442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	4a3f      	ldr	r2, [pc, #252]	; (8004548 <UART_Start_Receive_DMA+0x134>)
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	4a3e      	ldr	r2, [pc, #248]	; (800454c <UART_Start_Receive_DMA+0x138>)
 8004452:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	2200      	movs	r2, #0
 800445a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	f7fe fa58 	bl	8002928 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d019      	beq.n	80044d2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e5      	bne.n	800449e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3314      	adds	r3, #20
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	657b      	str	r3, [r7, #84]	; 0x54
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3314      	adds	r3, #20
 80044f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e5      	bne.n	80044d2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3314      	adds	r3, #20
 800450c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	617b      	str	r3, [r7, #20]
   return(result);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451c:	653b      	str	r3, [r7, #80]	; 0x50
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3314      	adds	r3, #20
 8004524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004526:	627a      	str	r2, [r7, #36]	; 0x24
 8004528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6a39      	ldr	r1, [r7, #32]
 800452c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	61fb      	str	r3, [r7, #28]
   return(result);
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e5      	bne.n	8004506 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3760      	adds	r7, #96	; 0x60
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	08004225 	.word	0x08004225
 8004548:	0800434b 	.word	0x0800434b
 800454c:	08004381 	.word	0x08004381

08004550 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	60bb      	str	r3, [r7, #8]
   return(result);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	61ba      	str	r2, [r7, #24]
 800457a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6979      	ldr	r1, [r7, #20]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	613b      	str	r3, [r7, #16]
   return(result);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004594:	bf00      	nop
 8004596:	3724      	adds	r7, #36	; 0x24
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b095      	sub	sp, #84	; 0x54
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045c8:	643a      	str	r2, [r7, #64]	; 0x40
 80045ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e5      	bne.n	80045a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e5      	bne.n	80045dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	2b01      	cmp	r3, #1
 8004616:	d119      	bne.n	800464c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	60bb      	str	r3, [r7, #8]
   return(result);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f023 0310 	bic.w	r3, r3, #16
 800462e:	647b      	str	r3, [r7, #68]	; 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004638:	61ba      	str	r2, [r7, #24]
 800463a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	613b      	str	r3, [r7, #16]
   return(result);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e5      	bne.n	8004618 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	; 0x30
}
 800465a:	bf00      	nop
 800465c:	3754      	adds	r7, #84	; 0x54
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7ff fdb9 	bl	80041f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b21      	cmp	r3, #33	; 0x21
 80046a0:	d13e      	bne.n	8004720 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046aa:	d114      	bne.n	80046d6 <UART_Transmit_IT+0x48>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d110      	bne.n	80046d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	1c9a      	adds	r2, r3, #2
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	621a      	str	r2, [r3, #32]
 80046d4:	e008      	b.n	80046e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	1c59      	adds	r1, r3, #1
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6211      	str	r1, [r2, #32]
 80046e0:	781a      	ldrb	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4619      	mov	r1, r3
 80046f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10f      	bne.n	800471c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800470a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800471a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	e000      	b.n	8004722 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
  }
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004744:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fd3e 	bl	80041d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b08c      	sub	sp, #48	; 0x30
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b22      	cmp	r3, #34	; 0x22
 8004770:	f040 80ab 	bne.w	80048ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477c:	d117      	bne.n	80047ae <UART_Receive_IT+0x50>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d113      	bne.n	80047ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	b29b      	uxth	r3, r3
 8004798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479c:	b29a      	uxth	r2, r3
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	1c9a      	adds	r2, r3, #2
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
 80047ac:	e026      	b.n	80047fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c0:	d007      	beq.n	80047d2 <UART_Receive_IT+0x74>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <UART_Receive_IT+0x82>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e008      	b.n	80047f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29b      	uxth	r3, r3
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	4619      	mov	r1, r3
 800480a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800480c:	2b00      	cmp	r3, #0
 800480e:	d15a      	bne.n	80048c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0220 	bic.w	r2, r2, #32
 800481e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800482e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0201 	bic.w	r2, r2, #1
 800483e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	2b01      	cmp	r3, #1
 800484e:	d135      	bne.n	80048bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	613b      	str	r3, [r7, #16]
   return(result);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f023 0310 	bic.w	r3, r3, #16
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	330c      	adds	r3, #12
 8004874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004876:	623a      	str	r2, [r7, #32]
 8004878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	69f9      	ldr	r1, [r7, #28]
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	61bb      	str	r3, [r7, #24]
   return(result);
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e5      	bne.n	8004856 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d10a      	bne.n	80048ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff fca9 	bl	800420c <HAL_UARTEx_RxEventCallback>
 80048ba:	e002      	b.n	80048c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7fc fd0d 	bl	80012dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e002      	b.n	80048cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e000      	b.n	80048cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3730      	adds	r7, #48	; 0x30
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d8:	b0c0      	sub	sp, #256	; 0x100
 80048da:	af00      	add	r7, sp, #0
 80048dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	68d9      	ldr	r1, [r3, #12]
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	ea40 0301 	orr.w	r3, r0, r1
 80048fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	431a      	orrs	r2, r3
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	431a      	orrs	r2, r3
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800492c:	f021 010c 	bic.w	r1, r1, #12
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800493a:	430b      	orrs	r3, r1
 800493c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494e:	6999      	ldr	r1, [r3, #24]
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	ea40 0301 	orr.w	r3, r0, r1
 800495a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b8f      	ldr	r3, [pc, #572]	; (8004ba0 <UART_SetConfig+0x2cc>)
 8004964:	429a      	cmp	r2, r3
 8004966:	d005      	beq.n	8004974 <UART_SetConfig+0xa0>
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b8d      	ldr	r3, [pc, #564]	; (8004ba4 <UART_SetConfig+0x2d0>)
 8004970:	429a      	cmp	r2, r3
 8004972:	d104      	bne.n	800497e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004974:	f7ff f90c 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 8004978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800497c:	e003      	b.n	8004986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800497e:	f7ff f8f3 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 8004982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004990:	f040 810c 	bne.w	8004bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004998:	2200      	movs	r2, #0
 800499a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800499e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049a6:	4622      	mov	r2, r4
 80049a8:	462b      	mov	r3, r5
 80049aa:	1891      	adds	r1, r2, r2
 80049ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ae:	415b      	adcs	r3, r3
 80049b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049b6:	4621      	mov	r1, r4
 80049b8:	eb12 0801 	adds.w	r8, r2, r1
 80049bc:	4629      	mov	r1, r5
 80049be:	eb43 0901 	adc.w	r9, r3, r1
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049d6:	4690      	mov	r8, r2
 80049d8:	4699      	mov	r9, r3
 80049da:	4623      	mov	r3, r4
 80049dc:	eb18 0303 	adds.w	r3, r8, r3
 80049e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049e4:	462b      	mov	r3, r5
 80049e6:	eb49 0303 	adc.w	r3, r9, r3
 80049ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a02:	460b      	mov	r3, r1
 8004a04:	18db      	adds	r3, r3, r3
 8004a06:	653b      	str	r3, [r7, #80]	; 0x50
 8004a08:	4613      	mov	r3, r2
 8004a0a:	eb42 0303 	adc.w	r3, r2, r3
 8004a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a18:	f7fb fbd6 	bl	80001c8 <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4b61      	ldr	r3, [pc, #388]	; (8004ba8 <UART_SetConfig+0x2d4>)
 8004a22:	fba3 2302 	umull	r2, r3, r3, r2
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	011c      	lsls	r4, r3, #4
 8004a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	1891      	adds	r1, r2, r2
 8004a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a44:	415b      	adcs	r3, r3
 8004a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a4c:	4641      	mov	r1, r8
 8004a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a52:	4649      	mov	r1, r9
 8004a54:	eb43 0b01 	adc.w	fp, r3, r1
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a6c:	4692      	mov	sl, r2
 8004a6e:	469b      	mov	fp, r3
 8004a70:	4643      	mov	r3, r8
 8004a72:	eb1a 0303 	adds.w	r3, sl, r3
 8004a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	18db      	adds	r3, r3, r3
 8004a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	eb42 0303 	adc.w	r3, r2, r3
 8004aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aae:	f7fb fb8b 	bl	80001c8 <__aeabi_uldivmod>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4b3b      	ldr	r3, [pc, #236]	; (8004ba8 <UART_SetConfig+0x2d4>)
 8004aba:	fba3 2301 	umull	r2, r3, r3, r1
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	2264      	movs	r2, #100	; 0x64
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	1acb      	subs	r3, r1, r3
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ace:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <UART_SetConfig+0x2d4>)
 8004ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004adc:	441c      	add	r4, r3
 8004ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004af0:	4642      	mov	r2, r8
 8004af2:	464b      	mov	r3, r9
 8004af4:	1891      	adds	r1, r2, r2
 8004af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004af8:	415b      	adcs	r3, r3
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b00:	4641      	mov	r1, r8
 8004b02:	1851      	adds	r1, r2, r1
 8004b04:	6339      	str	r1, [r7, #48]	; 0x30
 8004b06:	4649      	mov	r1, r9
 8004b08:	414b      	adcs	r3, r1
 8004b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b18:	4659      	mov	r1, fp
 8004b1a:	00cb      	lsls	r3, r1, #3
 8004b1c:	4651      	mov	r1, sl
 8004b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b22:	4651      	mov	r1, sl
 8004b24:	00ca      	lsls	r2, r1, #3
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	189b      	adds	r3, r3, r2
 8004b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b34:	464b      	mov	r3, r9
 8004b36:	460a      	mov	r2, r1
 8004b38:	eb42 0303 	adc.w	r3, r2, r3
 8004b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b54:	460b      	mov	r3, r1
 8004b56:	18db      	adds	r3, r3, r3
 8004b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	eb42 0303 	adc.w	r3, r2, r3
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b6a:	f7fb fb2d 	bl	80001c8 <__aeabi_uldivmod>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <UART_SetConfig+0x2d4>)
 8004b74:	fba3 1302 	umull	r1, r3, r3, r2
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	2164      	movs	r1, #100	; 0x64
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	3332      	adds	r3, #50	; 0x32
 8004b86:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <UART_SetConfig+0x2d4>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	f003 0207 	and.w	r2, r3, #7
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4422      	add	r2, r4
 8004b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b9c:	e105      	b.n	8004daa <UART_SetConfig+0x4d6>
 8004b9e:	bf00      	nop
 8004ba0:	40011000 	.word	0x40011000
 8004ba4:	40011400 	.word	0x40011400
 8004ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bbe:	4642      	mov	r2, r8
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	1891      	adds	r1, r2, r2
 8004bc4:	6239      	str	r1, [r7, #32]
 8004bc6:	415b      	adcs	r3, r3
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bce:	4641      	mov	r1, r8
 8004bd0:	1854      	adds	r4, r2, r1
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	eb43 0501 	adc.w	r5, r3, r1
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	00eb      	lsls	r3, r5, #3
 8004be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004be6:	00e2      	lsls	r2, r4, #3
 8004be8:	4614      	mov	r4, r2
 8004bea:	461d      	mov	r5, r3
 8004bec:	4643      	mov	r3, r8
 8004bee:	18e3      	adds	r3, r4, r3
 8004bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	eb45 0303 	adc.w	r3, r5, r3
 8004bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	008b      	lsls	r3, r1, #2
 8004c1e:	4621      	mov	r1, r4
 8004c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c24:	4621      	mov	r1, r4
 8004c26:	008a      	lsls	r2, r1, #2
 8004c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c2c:	f7fb facc 	bl	80001c8 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4b60      	ldr	r3, [pc, #384]	; (8004db8 <UART_SetConfig+0x4e4>)
 8004c36:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	011c      	lsls	r4, r3, #4
 8004c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c50:	4642      	mov	r2, r8
 8004c52:	464b      	mov	r3, r9
 8004c54:	1891      	adds	r1, r2, r2
 8004c56:	61b9      	str	r1, [r7, #24]
 8004c58:	415b      	adcs	r3, r3
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c60:	4641      	mov	r1, r8
 8004c62:	1851      	adds	r1, r2, r1
 8004c64:	6139      	str	r1, [r7, #16]
 8004c66:	4649      	mov	r1, r9
 8004c68:	414b      	adcs	r3, r1
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c78:	4659      	mov	r1, fp
 8004c7a:	00cb      	lsls	r3, r1, #3
 8004c7c:	4651      	mov	r1, sl
 8004c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c82:	4651      	mov	r1, sl
 8004c84:	00ca      	lsls	r2, r1, #3
 8004c86:	4610      	mov	r0, r2
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c94:	464b      	mov	r3, r9
 8004c96:	460a      	mov	r2, r1
 8004c98:	eb42 0303 	adc.w	r3, r2, r3
 8004c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cb8:	4649      	mov	r1, r9
 8004cba:	008b      	lsls	r3, r1, #2
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc2:	4641      	mov	r1, r8
 8004cc4:	008a      	lsls	r2, r1, #2
 8004cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cca:	f7fb fa7d 	bl	80001c8 <__aeabi_uldivmod>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <UART_SetConfig+0x4e4>)
 8004cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	2164      	movs	r1, #100	; 0x64
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	3332      	adds	r3, #50	; 0x32
 8004ce6:	4a34      	ldr	r2, [pc, #208]	; (8004db8 <UART_SetConfig+0x4e4>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf2:	441c      	add	r4, r3
 8004cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8004cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8004cfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d02:	4642      	mov	r2, r8
 8004d04:	464b      	mov	r3, r9
 8004d06:	1891      	adds	r1, r2, r2
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	415b      	adcs	r3, r3
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d12:	4641      	mov	r1, r8
 8004d14:	1851      	adds	r1, r2, r1
 8004d16:	6039      	str	r1, [r7, #0]
 8004d18:	4649      	mov	r1, r9
 8004d1a:	414b      	adcs	r3, r1
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d2a:	4659      	mov	r1, fp
 8004d2c:	00cb      	lsls	r3, r1, #3
 8004d2e:	4651      	mov	r1, sl
 8004d30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d34:	4651      	mov	r1, sl
 8004d36:	00ca      	lsls	r2, r1, #3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4642      	mov	r2, r8
 8004d40:	189b      	adds	r3, r3, r2
 8004d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d44:	464b      	mov	r3, r9
 8004d46:	460a      	mov	r2, r1
 8004d48:	eb42 0303 	adc.w	r3, r2, r3
 8004d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	663b      	str	r3, [r7, #96]	; 0x60
 8004d58:	667a      	str	r2, [r7, #100]	; 0x64
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d66:	4649      	mov	r1, r9
 8004d68:	008b      	lsls	r3, r1, #2
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d70:	4641      	mov	r1, r8
 8004d72:	008a      	lsls	r2, r1, #2
 8004d74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d78:	f7fb fa26 	bl	80001c8 <__aeabi_uldivmod>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <UART_SetConfig+0x4e4>)
 8004d82:	fba3 1302 	umull	r1, r3, r3, r2
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2164      	movs	r1, #100	; 0x64
 8004d8a:	fb01 f303 	mul.w	r3, r1, r3
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	3332      	adds	r3, #50	; 0x32
 8004d94:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <UART_SetConfig+0x4e4>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	f003 020f 	and.w	r2, r3, #15
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4422      	add	r2, r4
 8004da8:	609a      	str	r2, [r3, #8]
}
 8004daa:	bf00      	nop
 8004dac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004db0:	46bd      	mov	sp, r7
 8004db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db6:	bf00      	nop
 8004db8:	51eb851f 	.word	0x51eb851f

08004dbc <__libc_init_array>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	4d0d      	ldr	r5, [pc, #52]	; (8004df4 <__libc_init_array+0x38>)
 8004dc0:	4c0d      	ldr	r4, [pc, #52]	; (8004df8 <__libc_init_array+0x3c>)
 8004dc2:	1b64      	subs	r4, r4, r5
 8004dc4:	10a4      	asrs	r4, r4, #2
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	42a6      	cmp	r6, r4
 8004dca:	d109      	bne.n	8004de0 <__libc_init_array+0x24>
 8004dcc:	4d0b      	ldr	r5, [pc, #44]	; (8004dfc <__libc_init_array+0x40>)
 8004dce:	4c0c      	ldr	r4, [pc, #48]	; (8004e00 <__libc_init_array+0x44>)
 8004dd0:	f000 f820 	bl	8004e14 <_init>
 8004dd4:	1b64      	subs	r4, r4, r5
 8004dd6:	10a4      	asrs	r4, r4, #2
 8004dd8:	2600      	movs	r6, #0
 8004dda:	42a6      	cmp	r6, r4
 8004ddc:	d105      	bne.n	8004dea <__libc_init_array+0x2e>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de4:	4798      	blx	r3
 8004de6:	3601      	adds	r6, #1
 8004de8:	e7ee      	b.n	8004dc8 <__libc_init_array+0xc>
 8004dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dee:	4798      	blx	r3
 8004df0:	3601      	adds	r6, #1
 8004df2:	e7f2      	b.n	8004dda <__libc_init_array+0x1e>
 8004df4:	08004e54 	.word	0x08004e54
 8004df8:	08004e54 	.word	0x08004e54
 8004dfc:	08004e54 	.word	0x08004e54
 8004e00:	08004e58 	.word	0x08004e58

08004e04 <memset>:
 8004e04:	4402      	add	r2, r0
 8004e06:	4603      	mov	r3, r0
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d100      	bne.n	8004e0e <memset+0xa>
 8004e0c:	4770      	bx	lr
 8004e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e12:	e7f9      	b.n	8004e08 <memset+0x4>

08004e14 <_init>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	bf00      	nop
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr

08004e20 <_fini>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr
